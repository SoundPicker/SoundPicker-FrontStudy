{"ast":null,"code":"import { all, fork, put, takeLatest, call } from 'redux-saga//effects';\nimport axios from 'axios';\nimport { ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE, REMOVE_POST_REQUEST, REMOVE_POST_SUCCESS, REMOVE_POST_FAILURE, LIKE_POST_REQUEST, LIKE_POST_SUCCESS, LIKE_POST_FAILURE, UNLIKE_POST_REQUEST, UNLIKE_POST_SUCCESS, UNLIKE_POST_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE, LOAD_POSTS_REQUEST, LOAD_POSTS_SUCCESS, LOAD_POSTS_FAILURE, UPLOAD_IMAGES_REQUEST, UPLOAD_IMAGES_SUCCESS, UPLOAD_IMAGES_FAILURE, RETWEET_REQUEST, RETWEET_SUCCESS, RETWEET_FAILURE } from '../reducers/post';\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from '../reducers/user';\n\nfunction loadPostsAPI(lastId) {\n  return axios.get(`/posts?lastId=${lastId}`);\n}\n\nfunction* loadPosts(action) {\n  try {\n    const result = yield call(loadPostsAPI, action.lastId);\n    yield put({\n      type: LOAD_POSTS_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    yield put({\n      type: LOAD_POSTS_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction addPostAPI(data) {\n  return axios.post('/post', data);\n}\n\nfunction* addPost(action) {\n  try {\n    // call은 동기라 return할때까지 기다렸다 넣어줌\n    // fork는 비동기라 결과 오기 전에 바로 다음 거 실행\n    const result = yield call(addPostAPI, action.data);\n    yield put({\n      type: ADD_POST_SUCCESS,\n      data: result.data\n    });\n    yield put({\n      type: ADD_POST_TO_ME,\n      data: result.data.id\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      // put은 dispatch 개념\n      type: ADD_POST_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction removePostAPI(data) {\n  // delete는 data 못 넣음\n  return axios.delete(`/post/${data}`);\n}\n\nfunction* removePost(action) {\n  try {\n    const result = yield call(removePostAPI, action.data);\n    yield put({\n      type: REMOVE_POST_SUCCESS,\n      data: result.data\n    });\n    yield put({\n      type: REMOVE_POST_OF_ME,\n      data: result.data\n    });\n  } catch (err) {\n    yield put({\n      type: REMOVE_POST_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction likePostAPI(data) {\n  return axios.patch(`/post/${data}/like`); // 게시글의 일부분 수정이므로 patch\n}\n\nfunction* likePost(action) {\n  try {\n    const result = yield call(likePostAPI, action.data);\n    yield put({\n      type: LIKE_POST_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    yield put({\n      type: LIKE_POST_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction unlikePostAPI(data) {\n  return axios.delete(`/post/${data}/like`); // 게시글의 일부분 수정이므로 patch\n}\n\nfunction* unlikePost(action) {\n  try {\n    const result = yield call(unlikePostAPI, action.data);\n    yield put({\n      type: UNLIKE_POST_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    yield put({\n      type: UNLIKE_POST_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction uploadImagesAPI(data) {\n  return axios.post('/post/images', data); // 게시글의 일부분 수정이므로 patch\n}\n\nfunction* uploadImages(action) {\n  try {\n    const result = yield call(uploadImagesAPI, action.data);\n    yield put({\n      type: UPLOAD_IMAGES_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    yield put({\n      type: UPLOAD_IMAGES_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction addCommentAPI(data) {\n  return axios.post(`/post/${data.postId}/comment`, data); // POST /post/1/comment\n}\n\nfunction* addComment(action) {\n  try {\n    const result = yield call(addCommentAPI, action.data);\n    yield put({\n      type: ADD_COMMENT_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction retweetAPI(data) {\n  return axios.post(`/post/${data}/retweet`, data); // POST /post/1/comment\n}\n\nfunction* retweet(action) {\n  try {\n    const result = yield call(retweetAPI, action.data);\n    yield put({\n      type: RETWEET_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    yield put({\n      type: RETWEET_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction* watchLoadPosts() {\n  yield takeLatest(LOAD_POSTS_REQUEST, loadPosts);\n}\n\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n}\n\nfunction* watchRemovePost() {\n  yield takeLatest(REMOVE_POST_REQUEST, removePost);\n}\n\nfunction* watchLikePost() {\n  yield takeLatest(LIKE_POST_REQUEST, likePost);\n}\n\nfunction* watchUnLikePost() {\n  yield takeLatest(UNLIKE_POST_REQUEST, unlikePost);\n}\n\nfunction* watchUploadImages() {\n  yield takeLatest(UPLOAD_IMAGES_REQUEST, uploadImages);\n}\n\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\n\nfunction* watchRetweet() {\n  yield takeLatest(RETWEET_REQUEST, retweet);\n}\n\nexport default function* postSaga() {\n  yield all([fork(watchLoadPosts), fork(watchAddPost), fork(watchRemovePost), fork(watchLikePost), fork(watchUnLikePost), fork(watchUploadImages), fork(watchAddComment), fork(watchRetweet)]);\n}","map":{"version":3,"sources":["C:/Users/김승미/Desktop/SOPT/SoundPicker-Study/SoundPicker-FrontStudy/prepare/front/sagas/post.js"],"names":["all","fork","put","takeLatest","call","axios","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","LIKE_POST_REQUEST","LIKE_POST_SUCCESS","LIKE_POST_FAILURE","UNLIKE_POST_REQUEST","UNLIKE_POST_SUCCESS","UNLIKE_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","LOAD_POSTS_REQUEST","LOAD_POSTS_SUCCESS","LOAD_POSTS_FAILURE","UPLOAD_IMAGES_REQUEST","UPLOAD_IMAGES_SUCCESS","UPLOAD_IMAGES_FAILURE","RETWEET_REQUEST","RETWEET_SUCCESS","RETWEET_FAILURE","ADD_POST_TO_ME","REMOVE_POST_OF_ME","loadPostsAPI","lastId","get","loadPosts","action","result","type","data","err","error","response","addPostAPI","post","addPost","id","console","removePostAPI","delete","removePost","likePostAPI","patch","likePost","unlikePostAPI","unlikePost","uploadImagesAPI","uploadImages","addCommentAPI","postId","addComment","retweetAPI","retweet","watchLoadPosts","watchAddPost","watchRemovePost","watchLikePost","watchUnLikePost","watchUploadImages","watchAddComment","watchRetweet","postSaga"],"mappings":"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","sourcesContent":["import { all, fork, put, takeLatest, call } from 'redux-saga//effects';\r\nimport axios from 'axios';\r\n\r\nimport {\r\n  ADD_POST_REQUEST,\r\n  ADD_POST_SUCCESS,\r\n  ADD_POST_FAILURE,\r\n  REMOVE_POST_REQUEST,\r\n  REMOVE_POST_SUCCESS,\r\n  REMOVE_POST_FAILURE,\r\n  LIKE_POST_REQUEST,\r\n  LIKE_POST_SUCCESS,\r\n  LIKE_POST_FAILURE,\r\n  UNLIKE_POST_REQUEST,\r\n  UNLIKE_POST_SUCCESS,\r\n  UNLIKE_POST_FAILURE,\r\n  ADD_COMMENT_REQUEST,\r\n  ADD_COMMENT_SUCCESS,\r\n  ADD_COMMENT_FAILURE,\r\n  LOAD_POSTS_REQUEST,\r\n  LOAD_POSTS_SUCCESS,\r\n  LOAD_POSTS_FAILURE,\r\n  UPLOAD_IMAGES_REQUEST,\r\n  UPLOAD_IMAGES_SUCCESS,\r\n  UPLOAD_IMAGES_FAILURE,\r\n  RETWEET_REQUEST,\r\n  RETWEET_SUCCESS,\r\n  RETWEET_FAILURE,\r\n} from '../reducers/post';\r\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from '../reducers/user';\r\n\r\nfunction loadPostsAPI(lastId) {\r\n  return axios.get(`/posts?lastId=${lastId}`);\r\n}\r\n\r\nfunction* loadPosts(action) {\r\n  try {\r\n    const result = yield call(loadPostsAPI, action.lastId);\r\n    yield put({\r\n      type: LOAD_POSTS_SUCCESS,\r\n      data: result.data,\r\n    });\r\n  } catch (err) {\r\n    yield put({\r\n      type: LOAD_POSTS_FAILURE,\r\n      error: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction addPostAPI(data) {\r\n  return axios.post('/post', data);\r\n}\r\n\r\nfunction* addPost(action) {\r\n  try {\r\n    // call은 동기라 return할때까지 기다렸다 넣어줌\r\n    // fork는 비동기라 결과 오기 전에 바로 다음 거 실행\r\n    const result = yield call(addPostAPI, action.data);\r\n    yield put({\r\n      type: ADD_POST_SUCCESS,\r\n      data: result.data,\r\n    });\r\n    yield put({\r\n      type: ADD_POST_TO_ME,\r\n      data: result.data.id,\r\n    });\r\n  } catch (err) {\r\n    console.error(err);\r\n    yield put({\r\n      // put은 dispatch 개념\r\n      type: ADD_POST_FAILURE,\r\n      error: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction removePostAPI(data) {\r\n  // delete는 data 못 넣음\r\n  return axios.delete(`/post/${data}`);\r\n}\r\n\r\nfunction* removePost(action) {\r\n  try {\r\n    const result = yield call(removePostAPI, action.data);\r\n    yield put({\r\n      type: REMOVE_POST_SUCCESS,\r\n      data: result.data,\r\n    });\r\n    yield put({\r\n      type: REMOVE_POST_OF_ME,\r\n      data: result.data,\r\n    });\r\n  } catch (err) {\r\n    yield put({\r\n      type: REMOVE_POST_FAILURE,\r\n      error: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction likePostAPI(data) {\r\n  return axios.patch(`/post/${data}/like`); // 게시글의 일부분 수정이므로 patch\r\n}\r\n\r\nfunction* likePost(action) {\r\n  try {\r\n    const result = yield call(likePostAPI, action.data);\r\n    yield put({\r\n      type: LIKE_POST_SUCCESS,\r\n      data: result.data,\r\n    });\r\n  } catch (err) {\r\n    yield put({\r\n      type: LIKE_POST_FAILURE,\r\n      error: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction unlikePostAPI(data) {\r\n  return axios.delete(`/post/${data}/like`); // 게시글의 일부분 수정이므로 patch\r\n}\r\n\r\nfunction* unlikePost(action) {\r\n  try {\r\n    const result = yield call(unlikePostAPI, action.data);\r\n    yield put({\r\n      type: UNLIKE_POST_SUCCESS,\r\n      data: result.data,\r\n    });\r\n  } catch (err) {\r\n    yield put({\r\n      type: UNLIKE_POST_FAILURE,\r\n      error: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction uploadImagesAPI(data) {\r\n  return axios.post('/post/images', data); // 게시글의 일부분 수정이므로 patch\r\n}\r\n\r\nfunction* uploadImages(action) {\r\n  try {\r\n    const result = yield call(uploadImagesAPI, action.data);\r\n    yield put({\r\n      type: UPLOAD_IMAGES_SUCCESS,\r\n      data: result.data,\r\n    });\r\n  } catch (err) {\r\n    yield put({\r\n      type: UPLOAD_IMAGES_FAILURE,\r\n      error: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction addCommentAPI(data) {\r\n  return axios.post(`/post/${data.postId}/comment`, data); // POST /post/1/comment\r\n}\r\n\r\nfunction* addComment(action) {\r\n  try {\r\n    const result = yield call(addCommentAPI, action.data);\r\n    yield put({\r\n      type: ADD_COMMENT_SUCCESS,\r\n      data: result.data,\r\n    });\r\n  } catch (err) {\r\n    yield put({\r\n      type: ADD_COMMENT_FAILURE,\r\n      error: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction retweetAPI(data) {\r\n  return axios.post(`/post/${data}/retweet`, data); // POST /post/1/comment\r\n}\r\n\r\nfunction* retweet(action) {\r\n  try {\r\n    const result = yield call(retweetAPI, action.data);\r\n    yield put({\r\n      type: RETWEET_SUCCESS,\r\n      data: result.data,\r\n    });\r\n  } catch (err) {\r\n    yield put({\r\n      type: RETWEET_FAILURE,\r\n      error: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchLoadPosts() {\r\n  yield takeLatest(LOAD_POSTS_REQUEST, loadPosts);\r\n}\r\n\r\nfunction* watchAddPost() {\r\n  yield takeLatest(ADD_POST_REQUEST, addPost);\r\n}\r\n\r\nfunction* watchRemovePost() {\r\n  yield takeLatest(REMOVE_POST_REQUEST, removePost);\r\n}\r\n\r\nfunction* watchLikePost() {\r\n  yield takeLatest(LIKE_POST_REQUEST, likePost);\r\n}\r\n\r\nfunction* watchUnLikePost() {\r\n  yield takeLatest(UNLIKE_POST_REQUEST, unlikePost);\r\n}\r\n\r\nfunction* watchUploadImages() {\r\n  yield takeLatest(UPLOAD_IMAGES_REQUEST, uploadImages);\r\n}\r\n\r\nfunction* watchAddComment() {\r\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\r\n}\r\n\r\nfunction* watchRetweet() {\r\n  yield takeLatest(RETWEET_REQUEST, retweet);\r\n}\r\n\r\nexport default function* postSaga() {\r\n  yield all([\r\n    fork(watchLoadPosts),\r\n    fork(watchAddPost),\r\n    fork(watchRemovePost),\r\n    fork(watchLikePost),\r\n    fork(watchUnLikePost),\r\n    fork(watchUploadImages),\r\n    fork(watchAddComment),\r\n    fork(watchRetweet),\r\n  ]);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}