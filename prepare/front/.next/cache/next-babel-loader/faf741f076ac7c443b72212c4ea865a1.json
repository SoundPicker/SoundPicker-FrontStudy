{"ast":null,"code":"import produce from 'immer';\nexport const initialState = {\n  mainPosts: [],\n  imagePaths: [],\n  hasMorePost: true,\n  loadPostsLoading: false,\n  loadPostsDone: false,\n  loadPostsError: null,\n  addPostLoading: false,\n  addPostDone: false,\n  addPostError: null,\n  removePostLoading: false,\n  removePostDone: false,\n  removePostError: null,\n  likePostLoading: false,\n  likePostDone: false,\n  likePostError: null,\n  unlikePostLoading: false,\n  unlikePostDone: false,\n  unlikePostError: null,\n  addCommentLoading: false,\n  addCommentDone: false,\n  addCommentError: null\n};\ninitialState.mainPosts = initialState.mainPosts.concat(); // action type(action 이름)을 상수로 빼주면 switch문에서 재활용 가능\n\nexport const LOAD_POSTS_REQUEST = 'LOAD_POSTS_REQUEST';\nexport const LOAD_POSTS_SUCCESS = 'LOAD_POSTS_SUCCESS';\nexport const LOAD_POSTS_FAILURE = 'LOAD_POSTS_FAILURE';\nexport const ADD_POST_REQUEST = 'ADD_POST_REQUEST';\nexport const ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\nexport const ADD_POST_FAILURE = 'ADD_POST_FAILURE';\nexport const REMOVE_POST_REQUEST = 'REMOVE_POST_REQUEST';\nexport const REMOVE_POST_SUCCESS = 'REMOVE_POST_SUCCESS';\nexport const REMOVE_POST_FAILURE = 'REMOVE_POST_FAILURE';\nexport const LIKE_POST_REQUEST = 'LIKE_POST_REQUEST';\nexport const LIKE_POST_SUCCESS = 'LIKE_POST_SUCCESS';\nexport const LIKE_POST_FAILURE = 'LIKE_POST_FAILURE';\nexport const UNLIKE_POST_REQUEST = 'UNLIKE_POST_REQUEST';\nexport const UNLIKE_POST_SUCCESS = 'UNLIKE_POST_SUCCESS';\nexport const UNLIKE_POST_FAILURE = 'UNLIKE_POST_FAILURE';\nexport const ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST';\nexport const ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS';\nexport const ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE';\nexport const addPostRequestAction = data => ({\n  type: ADD_POST_REQUEST,\n  data\n});\nexport const addCommentRequestAction = data => ({\n  type: ADD_COMMENT_REQUEST,\n  data\n}); // 이전 상태를 액션을 통해 다음 상태로 만들어내는 함수(불변성은 지키면서)\n\nconst reducer = (state = initialState, action) => produce(state, draft => {\n  // state의 이름이 draft로 바뀌고, 불변성과 상관없이 막 바꿔도 됨\n  // immer가 알아서 불변성 지키면서 다음 상태로 만들어줌\n  // 그래서 state는 건들지 말고 draft만 바꾸면 된다.\n  switch (action.type) {\n    case LOAD_POSTS_REQUEST:\n      draft.loadPostsLoading = true;\n      draft.loadPostsDone = false;\n      draft.loadPostsError = null;\n      break;\n\n    case LOAD_POSTS_SUCCESS:\n      draft.loadPostsLoading = false;\n      draft.loadPostsDone = true;\n      draft.mainPosts = action.data.concat(draft.mainPosts);\n      draft.hasMorePost = draft.mainPosts.length < 50;\n      break;\n\n    case LOAD_POSTS_FAILURE:\n      draft.loadPostsLoading = false;\n      draft.loadPostsError = action.error;\n      break;\n\n    case ADD_POST_REQUEST:\n      draft.addPostLoading = true;\n      draft.addPostDone = false;\n      draft.addPostError = null;\n      break;\n\n    case ADD_POST_SUCCESS:\n      draft.addPostLoading = false;\n      draft.addPostDone = true; // 앞에 추가해야 제일 위에 추가됨\n\n      draft.mainPosts.unshift(action.data);\n      break;\n\n    case ADD_POST_FAILURE:\n      draft.addPostLoading = false;\n      draft.addPostError = action.error;\n      break;\n\n    case REMOVE_POST_REQUEST:\n      draft.removePostLoading = true;\n      draft.removePostDone = false;\n      draft.removePostError = null;\n      break;\n\n    case REMOVE_POST_SUCCESS:\n      draft.removePostLoading = false;\n      draft.removePostDone = true;\n      draft.mainPosts = draft.mainPosts.filter(v => v.id !== action.data);\n      break;\n\n    case REMOVE_POST_FAILURE:\n      draft.removePostLoading = false;\n      draft.removePostError = action.error;\n      break;\n\n    case ADD_COMMENT_REQUEST:\n      draft.addCommentLoading = true;\n      draft.addCommentDone = false;\n      draft.addCommentError = null;\n      break;\n\n    case ADD_COMMENT_SUCCESS:\n      {\n        const post = draft.mainPosts.find(v => v.id === action.data.PostId);\n        post.Comments.unshift(action.data);\n        draft.addCommentLoading = false;\n        draft.addCommentDone = true;\n        break;\n      }\n    // 불변성을 지키기 위해 원래는 아래와 같이 작성해야 했음\n    // const postIndex = state.mainPosts.findIndex((v) => v.id === action.data.postId);\n    // const post = { ...state.mainPosts[postIndex] };\n    // post.Comments = [dummyComment(action.data.content), ...post.Comments];\n    // mainPosts = [...state.mainPosts];\n    // mainPosts[postIndex] = post;\n\n    case ADD_COMMENT_FAILURE:\n      draft.addCommentLoading = false;\n      draft.addCommentError = action.error;\n      break;\n\n    default:\n      break;\n  }\n});\n\nexport default reducer;","map":{"version":3,"sources":["C:/Users/김승미/Desktop/SOPT/SoundPicker-Study/SoundPicker-FrontStudy/prepare/front/reducers/post.js"],"names":["produce","initialState","mainPosts","imagePaths","hasMorePost","loadPostsLoading","loadPostsDone","loadPostsError","addPostLoading","addPostDone","addPostError","removePostLoading","removePostDone","removePostError","likePostLoading","likePostDone","likePostError","unlikePostLoading","unlikePostDone","unlikePostError","addCommentLoading","addCommentDone","addCommentError","concat","LOAD_POSTS_REQUEST","LOAD_POSTS_SUCCESS","LOAD_POSTS_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","LIKE_POST_REQUEST","LIKE_POST_SUCCESS","LIKE_POST_FAILURE","UNLIKE_POST_REQUEST","UNLIKE_POST_SUCCESS","UNLIKE_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","addPostRequestAction","data","type","addCommentRequestAction","reducer","state","action","draft","length","error","unshift","filter","v","id","post","find","PostId","Comments"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,OAApB;AAEA,OAAO,MAAMC,YAAY,GAAG;AAC1BC,EAAAA,SAAS,EAAE,EADe;AAE1BC,EAAAA,UAAU,EAAE,EAFc;AAG1BC,EAAAA,WAAW,EAAE,IAHa;AAI1BC,EAAAA,gBAAgB,EAAE,KAJQ;AAK1BC,EAAAA,aAAa,EAAE,KALW;AAM1BC,EAAAA,cAAc,EAAE,IANU;AAO1BC,EAAAA,cAAc,EAAE,KAPU;AAQ1BC,EAAAA,WAAW,EAAE,KARa;AAS1BC,EAAAA,YAAY,EAAE,IATY;AAU1BC,EAAAA,iBAAiB,EAAE,KAVO;AAW1BC,EAAAA,cAAc,EAAE,KAXU;AAY1BC,EAAAA,eAAe,EAAE,IAZS;AAa1BC,EAAAA,eAAe,EAAE,KAbS;AAc1BC,EAAAA,YAAY,EAAE,KAdY;AAe1BC,EAAAA,aAAa,EAAE,IAfW;AAgB1BC,EAAAA,iBAAiB,EAAE,KAhBO;AAiB1BC,EAAAA,cAAc,EAAE,KAjBU;AAkB1BC,EAAAA,eAAe,EAAE,IAlBS;AAmB1BC,EAAAA,iBAAiB,EAAE,KAnBO;AAoB1BC,EAAAA,cAAc,EAAE,KApBU;AAqB1BC,EAAAA,eAAe,EAAE;AArBS,CAArB;AAwBPrB,YAAY,CAACC,SAAb,GAAyBD,YAAY,CAACC,SAAb,CAAuBqB,MAAvB,EAAzB,C,CAEA;;AACA,OAAO,MAAMC,kBAAkB,GAAG,oBAA3B;AACP,OAAO,MAAMC,kBAAkB,GAAG,oBAA3B;AACP,OAAO,MAAMC,kBAAkB,GAAG,oBAA3B;AAEP,OAAO,MAAMC,gBAAgB,GAAG,kBAAzB;AACP,OAAO,MAAMC,gBAAgB,GAAG,kBAAzB;AACP,OAAO,MAAMC,gBAAgB,GAAG,kBAAzB;AAEP,OAAO,MAAMC,mBAAmB,GAAG,qBAA5B;AACP,OAAO,MAAMC,mBAAmB,GAAG,qBAA5B;AACP,OAAO,MAAMC,mBAAmB,GAAG,qBAA5B;AAEP,OAAO,MAAMC,iBAAiB,GAAG,mBAA1B;AACP,OAAO,MAAMC,iBAAiB,GAAG,mBAA1B;AACP,OAAO,MAAMC,iBAAiB,GAAG,mBAA1B;AAEP,OAAO,MAAMC,mBAAmB,GAAG,qBAA5B;AACP,OAAO,MAAMC,mBAAmB,GAAG,qBAA5B;AACP,OAAO,MAAMC,mBAAmB,GAAG,qBAA5B;AAEP,OAAO,MAAMC,mBAAmB,GAAG,qBAA5B;AACP,OAAO,MAAMC,mBAAmB,GAAG,qBAA5B;AACP,OAAO,MAAMC,mBAAmB,GAAG,qBAA5B;AAEP,OAAO,MAAMC,oBAAoB,GAAIC,IAAD,KAAW;AAC7CC,EAAAA,IAAI,EAAEjB,gBADuC;AAE7CgB,EAAAA;AAF6C,CAAX,CAA7B;AAKP,OAAO,MAAME,uBAAuB,GAAIF,IAAD,KAAW;AAChDC,EAAAA,IAAI,EAAEL,mBAD0C;AAEhDI,EAAAA;AAFgD,CAAX,CAAhC,C,CAKP;;AACA,MAAMG,OAAO,GAAG,CAACC,KAAK,GAAG9C,YAAT,EAAuB+C,MAAvB,KACdhD,OAAO,CAAC+C,KAAD,EAASE,KAAD,IAAW;AACxB;AACA;AACA;AACA,UAAQD,MAAM,CAACJ,IAAf;AACE,SAAKpB,kBAAL;AACEyB,MAAAA,KAAK,CAAC5C,gBAAN,GAAyB,IAAzB;AACA4C,MAAAA,KAAK,CAAC3C,aAAN,GAAsB,KAAtB;AACA2C,MAAAA,KAAK,CAAC1C,cAAN,GAAuB,IAAvB;AACA;;AACF,SAAKkB,kBAAL;AACEwB,MAAAA,KAAK,CAAC5C,gBAAN,GAAyB,KAAzB;AACA4C,MAAAA,KAAK,CAAC3C,aAAN,GAAsB,IAAtB;AACA2C,MAAAA,KAAK,CAAC/C,SAAN,GAAkB8C,MAAM,CAACL,IAAP,CAAYpB,MAAZ,CAAmB0B,KAAK,CAAC/C,SAAzB,CAAlB;AACA+C,MAAAA,KAAK,CAAC7C,WAAN,GAAoB6C,KAAK,CAAC/C,SAAN,CAAgBgD,MAAhB,GAAyB,EAA7C;AACA;;AACF,SAAKxB,kBAAL;AACEuB,MAAAA,KAAK,CAAC5C,gBAAN,GAAyB,KAAzB;AACA4C,MAAAA,KAAK,CAAC1C,cAAN,GAAuByC,MAAM,CAACG,KAA9B;AACA;;AACF,SAAKxB,gBAAL;AACEsB,MAAAA,KAAK,CAACzC,cAAN,GAAuB,IAAvB;AACAyC,MAAAA,KAAK,CAACxC,WAAN,GAAoB,KAApB;AACAwC,MAAAA,KAAK,CAACvC,YAAN,GAAqB,IAArB;AACA;;AACF,SAAKkB,gBAAL;AACEqB,MAAAA,KAAK,CAACzC,cAAN,GAAuB,KAAvB;AACAyC,MAAAA,KAAK,CAACxC,WAAN,GAAoB,IAApB,CAFF,CAGE;;AACAwC,MAAAA,KAAK,CAAC/C,SAAN,CAAgBkD,OAAhB,CAAwBJ,MAAM,CAACL,IAA/B;AACA;;AACF,SAAKd,gBAAL;AACEoB,MAAAA,KAAK,CAACzC,cAAN,GAAuB,KAAvB;AACAyC,MAAAA,KAAK,CAACvC,YAAN,GAAqBsC,MAAM,CAACG,KAA5B;AACA;;AACF,SAAKrB,mBAAL;AACEmB,MAAAA,KAAK,CAACtC,iBAAN,GAA0B,IAA1B;AACAsC,MAAAA,KAAK,CAACrC,cAAN,GAAuB,KAAvB;AACAqC,MAAAA,KAAK,CAACpC,eAAN,GAAwB,IAAxB;AACA;;AACF,SAAKkB,mBAAL;AACEkB,MAAAA,KAAK,CAACtC,iBAAN,GAA0B,KAA1B;AACAsC,MAAAA,KAAK,CAACrC,cAAN,GAAuB,IAAvB;AACAqC,MAAAA,KAAK,CAAC/C,SAAN,GAAkB+C,KAAK,CAAC/C,SAAN,CAAgBmD,MAAhB,CAAwBC,CAAD,IAAOA,CAAC,CAACC,EAAF,KAASP,MAAM,CAACL,IAA9C,CAAlB;AACA;;AACF,SAAKX,mBAAL;AACEiB,MAAAA,KAAK,CAACtC,iBAAN,GAA0B,KAA1B;AACAsC,MAAAA,KAAK,CAACpC,eAAN,GAAwBmC,MAAM,CAACG,KAA/B;AACA;;AACF,SAAKZ,mBAAL;AACEU,MAAAA,KAAK,CAAC7B,iBAAN,GAA0B,IAA1B;AACA6B,MAAAA,KAAK,CAAC5B,cAAN,GAAuB,KAAvB;AACA4B,MAAAA,KAAK,CAAC3B,eAAN,GAAwB,IAAxB;AACA;;AACF,SAAKkB,mBAAL;AAA0B;AACxB,cAAMgB,IAAI,GAAGP,KAAK,CAAC/C,SAAN,CAAgBuD,IAAhB,CAAsBH,CAAD,IAAOA,CAAC,CAACC,EAAF,KAASP,MAAM,CAACL,IAAP,CAAYe,MAAjD,CAAb;AACAF,QAAAA,IAAI,CAACG,QAAL,CAAcP,OAAd,CAAsBJ,MAAM,CAACL,IAA7B;AACAM,QAAAA,KAAK,CAAC7B,iBAAN,GAA0B,KAA1B;AACA6B,QAAAA,KAAK,CAAC5B,cAAN,GAAuB,IAAvB;AACA;AACD;AACD;AACA;AACA;AACA;AACA;AACA;;AACA,SAAKoB,mBAAL;AACEQ,MAAAA,KAAK,CAAC7B,iBAAN,GAA0B,KAA1B;AACA6B,MAAAA,KAAK,CAAC3B,eAAN,GAAwB0B,MAAM,CAACG,KAA/B;AACA;;AACF;AACE;AApEJ;AAsED,CA1EM,CADT;;AA6EA,eAAeL,OAAf","sourcesContent":["import produce from 'immer';\r\n\r\nexport const initialState = {\r\n  mainPosts: [],\r\n  imagePaths: [],\r\n  hasMorePost: true,\r\n  loadPostsLoading: false,\r\n  loadPostsDone: false,\r\n  loadPostsError: null,\r\n  addPostLoading: false,\r\n  addPostDone: false,\r\n  addPostError: null,\r\n  removePostLoading: false,\r\n  removePostDone: false,\r\n  removePostError: null,\r\n  likePostLoading: false,\r\n  likePostDone: false,\r\n  likePostError: null,\r\n  unlikePostLoading: false,\r\n  unlikePostDone: false,\r\n  unlikePostError: null,\r\n  addCommentLoading: false,\r\n  addCommentDone: false,\r\n  addCommentError: null,\r\n};\r\n\r\ninitialState.mainPosts = initialState.mainPosts.concat();\r\n\r\n// action type(action 이름)을 상수로 빼주면 switch문에서 재활용 가능\r\nexport const LOAD_POSTS_REQUEST = 'LOAD_POSTS_REQUEST';\r\nexport const LOAD_POSTS_SUCCESS = 'LOAD_POSTS_SUCCESS';\r\nexport const LOAD_POSTS_FAILURE = 'LOAD_POSTS_FAILURE';\r\n\r\nexport const ADD_POST_REQUEST = 'ADD_POST_REQUEST';\r\nexport const ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\r\nexport const ADD_POST_FAILURE = 'ADD_POST_FAILURE';\r\n\r\nexport const REMOVE_POST_REQUEST = 'REMOVE_POST_REQUEST';\r\nexport const REMOVE_POST_SUCCESS = 'REMOVE_POST_SUCCESS';\r\nexport const REMOVE_POST_FAILURE = 'REMOVE_POST_FAILURE';\r\n\r\nexport const LIKE_POST_REQUEST = 'LIKE_POST_REQUEST';\r\nexport const LIKE_POST_SUCCESS = 'LIKE_POST_SUCCESS';\r\nexport const LIKE_POST_FAILURE = 'LIKE_POST_FAILURE';\r\n\r\nexport const UNLIKE_POST_REQUEST = 'UNLIKE_POST_REQUEST';\r\nexport const UNLIKE_POST_SUCCESS = 'UNLIKE_POST_SUCCESS';\r\nexport const UNLIKE_POST_FAILURE = 'UNLIKE_POST_FAILURE';\r\n\r\nexport const ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST';\r\nexport const ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS';\r\nexport const ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE';\r\n\r\nexport const addPostRequestAction = (data) => ({\r\n  type: ADD_POST_REQUEST,\r\n  data,\r\n});\r\n\r\nexport const addCommentRequestAction = (data) => ({\r\n  type: ADD_COMMENT_REQUEST,\r\n  data,\r\n});\r\n\r\n// 이전 상태를 액션을 통해 다음 상태로 만들어내는 함수(불변성은 지키면서)\r\nconst reducer = (state = initialState, action) =>\r\n  produce(state, (draft) => {\r\n    // state의 이름이 draft로 바뀌고, 불변성과 상관없이 막 바꿔도 됨\r\n    // immer가 알아서 불변성 지키면서 다음 상태로 만들어줌\r\n    // 그래서 state는 건들지 말고 draft만 바꾸면 된다.\r\n    switch (action.type) {\r\n      case LOAD_POSTS_REQUEST:\r\n        draft.loadPostsLoading = true;\r\n        draft.loadPostsDone = false;\r\n        draft.loadPostsError = null;\r\n        break;\r\n      case LOAD_POSTS_SUCCESS:\r\n        draft.loadPostsLoading = false;\r\n        draft.loadPostsDone = true;\r\n        draft.mainPosts = action.data.concat(draft.mainPosts);\r\n        draft.hasMorePost = draft.mainPosts.length < 50;\r\n        break;\r\n      case LOAD_POSTS_FAILURE:\r\n        draft.loadPostsLoading = false;\r\n        draft.loadPostsError = action.error;\r\n        break;\r\n      case ADD_POST_REQUEST:\r\n        draft.addPostLoading = true;\r\n        draft.addPostDone = false;\r\n        draft.addPostError = null;\r\n        break;\r\n      case ADD_POST_SUCCESS:\r\n        draft.addPostLoading = false;\r\n        draft.addPostDone = true;\r\n        // 앞에 추가해야 제일 위에 추가됨\r\n        draft.mainPosts.unshift(action.data);\r\n        break;\r\n      case ADD_POST_FAILURE:\r\n        draft.addPostLoading = false;\r\n        draft.addPostError = action.error;\r\n        break;\r\n      case REMOVE_POST_REQUEST:\r\n        draft.removePostLoading = true;\r\n        draft.removePostDone = false;\r\n        draft.removePostError = null;\r\n        break;\r\n      case REMOVE_POST_SUCCESS:\r\n        draft.removePostLoading = false;\r\n        draft.removePostDone = true;\r\n        draft.mainPosts = draft.mainPosts.filter((v) => v.id !== action.data);\r\n        break;\r\n      case REMOVE_POST_FAILURE:\r\n        draft.removePostLoading = false;\r\n        draft.removePostError = action.error;\r\n        break;\r\n      case ADD_COMMENT_REQUEST:\r\n        draft.addCommentLoading = true;\r\n        draft.addCommentDone = false;\r\n        draft.addCommentError = null;\r\n        break;\r\n      case ADD_COMMENT_SUCCESS: {\r\n        const post = draft.mainPosts.find((v) => v.id === action.data.PostId);\r\n        post.Comments.unshift(action.data);\r\n        draft.addCommentLoading = false;\r\n        draft.addCommentDone = true;\r\n        break;\r\n      }\r\n      // 불변성을 지키기 위해 원래는 아래와 같이 작성해야 했음\r\n      // const postIndex = state.mainPosts.findIndex((v) => v.id === action.data.postId);\r\n      // const post = { ...state.mainPosts[postIndex] };\r\n      // post.Comments = [dummyComment(action.data.content), ...post.Comments];\r\n      // mainPosts = [...state.mainPosts];\r\n      // mainPosts[postIndex] = post;\r\n      case ADD_COMMENT_FAILURE:\r\n        draft.addCommentLoading = false;\r\n        draft.addCommentError = action.error;\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  });\r\n\r\nexport default reducer;\r\n"]},"metadata":{},"sourceType":"module"}