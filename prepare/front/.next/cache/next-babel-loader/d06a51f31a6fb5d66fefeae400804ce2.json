{"ast":null,"code":"import { all, fork, put, takeLatest, delay } from 'redux-saga//effects';\nimport axios from 'axios';\nimport { ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS } from '../reducers/post';\n\nfunction addPostAPI(data) {\n  return axios.post('/api/post', data);\n}\n\nfunction addCommentAPI(data) {\n  return axios.post('/api/post/${data.postId}/comment', data);\n}\n\nfunction* addPost(action) {\n  try {\n    // const result = yield call(addPostAPI, action.data); //call은 동기라 return할때까지 기다렸다 넣어줌, fork는 비동기라 결과 오기 전에 바로 다음 거 실행\n    delay(1000);\n    yield put({\n      type: ADD_POST_SUCCESS // data: result.data,\n\n    });\n  } catch (err) {\n    yield put({\n      //put은 dispatch 개념\n      type: ADD_POST_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction* addComment() {\n  try {\n    // const result = yield call(addCommentAPI, action.data);\n    yield put({\n      type: ADD_COMMENT_SUCCESS // data: result.data,\n\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n}\n\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\n\nexport default function* postSaga() {\n  yield all([fork(watchAddPost), fork(watchAddComment)]);\n}","map":{"version":3,"sources":["C:/Users/김승미/Desktop/SOPT/SoundPicker-Study/SoundPicker-FrontStudy/prepare/front/sagas/post.js"],"names":["all","fork","put","takeLatest","delay","axios","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","addPostAPI","data","post","addCommentAPI","addPost","action","type","err","response","addComment","ADD_COMMENT_FAILURE","watchAddPost","watchAddComment","postSaga"],"mappings":"AAAA,SAASA,GAAT,EAAcC,IAAd,EAAoBC,GAApB,EAAyBC,UAAzB,EAAqCC,KAArC,QAAkD,qBAAlD;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,SACEC,gBADF,EAEEC,gBAFF,EAGEC,gBAHF,EAIEC,mBAJF,EAKEC,mBALF,QAMO,kBANP;;AAQA,SAASC,UAAT,CAAoBC,IAApB,EAA0B;AACxB,SAAOP,KAAK,CAACQ,IAAN,CAAW,WAAX,EAAwBD,IAAxB,CAAP;AACD;;AAED,SAASE,aAAT,CAAuBF,IAAvB,EAA6B;AAC3B,SAAOP,KAAK,CAACQ,IAAN,CAAW,kCAAX,EAA+CD,IAA/C,CAAP;AACD;;AAED,UAAUG,OAAV,CAAkBC,MAAlB,EAA0B;AACxB,MAAI;AACF;AACAZ,IAAAA,KAAK,CAAC,IAAD,CAAL;AACA,UAAMF,GAAG,CAAC;AACRe,MAAAA,IAAI,EAAEV,gBADE,CAER;;AAFQ,KAAD,CAAT;AAID,GAPD,CAOE,OAAOW,GAAP,EAAY;AACZ,UAAMhB,GAAG,CAAC;AACR;AACAe,MAAAA,IAAI,EAAET,gBAFE;AAGRI,MAAAA,IAAI,EAAEM,GAAG,CAACC,QAAJ,CAAaP;AAHX,KAAD,CAAT;AAKD;AACF;;AAED,UAAUQ,UAAV,GAAuB;AACrB,MAAI;AACF;AACA,UAAMlB,GAAG,CAAC;AACRe,MAAAA,IAAI,EAAEP,mBADE,CAER;;AAFQ,KAAD,CAAT;AAID,GAND,CAME,OAAOQ,GAAP,EAAY;AACZ,UAAMhB,GAAG,CAAC;AACRe,MAAAA,IAAI,EAAEI,mBADE;AAERT,MAAAA,IAAI,EAAEM,GAAG,CAACC,QAAJ,CAAaP;AAFX,KAAD,CAAT;AAID;AACF;;AAED,UAAUU,YAAV,GAAyB;AACvB,QAAMnB,UAAU,CAACG,gBAAD,EAAmBS,OAAnB,CAAhB;AACD;;AAED,UAAUQ,eAAV,GAA4B;AAC1B,QAAMpB,UAAU,CAACM,mBAAD,EAAsBW,UAAtB,CAAhB;AACD;;AAED,eAAe,UAAUI,QAAV,GAAqB;AAClC,QAAMxB,GAAG,CAAC,CAACC,IAAI,CAACqB,YAAD,CAAL,EAAqBrB,IAAI,CAACsB,eAAD,CAAzB,CAAD,CAAT;AACD","sourcesContent":["import { all, fork, put, takeLatest, delay } from 'redux-saga//effects';\r\nimport axios from 'axios';\r\n\r\nimport {\r\n  ADD_POST_REQUEST,\r\n  ADD_POST_SUCCESS,\r\n  ADD_POST_FAILURE,\r\n  ADD_COMMENT_REQUEST,\r\n  ADD_COMMENT_SUCCESS,\r\n} from '../reducers/post';\r\n\r\nfunction addPostAPI(data) {\r\n  return axios.post('/api/post', data);\r\n}\r\n\r\nfunction addCommentAPI(data) {\r\n  return axios.post('/api/post/${data.postId}/comment', data);\r\n}\r\n\r\nfunction* addPost(action) {\r\n  try {\r\n    // const result = yield call(addPostAPI, action.data); //call은 동기라 return할때까지 기다렸다 넣어줌, fork는 비동기라 결과 오기 전에 바로 다음 거 실행\r\n    delay(1000);\r\n    yield put({\r\n      type: ADD_POST_SUCCESS,\r\n      // data: result.data,\r\n    });\r\n  } catch (err) {\r\n    yield put({\r\n      //put은 dispatch 개념\r\n      type: ADD_POST_FAILURE,\r\n      data: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction* addComment() {\r\n  try {\r\n    // const result = yield call(addCommentAPI, action.data);\r\n    yield put({\r\n      type: ADD_COMMENT_SUCCESS,\r\n      // data: result.data,\r\n    });\r\n  } catch (err) {\r\n    yield put({\r\n      type: ADD_COMMENT_FAILURE,\r\n      data: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchAddPost() {\r\n  yield takeLatest(ADD_POST_REQUEST, addPost);\r\n}\r\n\r\nfunction* watchAddComment() {\r\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\r\n}\r\n\r\nexport default function* postSaga() {\r\n  yield all([fork(watchAddPost), fork(watchAddComment)]);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}