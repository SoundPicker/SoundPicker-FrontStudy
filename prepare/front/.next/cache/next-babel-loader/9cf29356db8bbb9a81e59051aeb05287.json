{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nexport const initialState = {\n  mainPosts: [{\n    id: 1,\n    User: {\n      id: 1,\n      nickname: \"제로초\"\n    },\n    content: \"첫 번째 게시글 #해시태그 #익스프레스\",\n    Images: [{\n      src: \"https://www.daangn.com/images/meta/home/daangn.png\"\n    }, {\n      src: \"https://user-images.githubusercontent.com/1305982/50403650-44804500-07db-11e9-98aa-cfee9a9aec69.png\"\n    }, {\n      src: \"https://platum.kr/wp-content/uploads/2020/09/daangn_mau1000.jpg\"\n    }],\n    Comments: [{\n      User: {\n        nickname: \"nero\"\n      },\n      content: \"우와 개정판이 나왔군요~\"\n    }, {\n      User: {\n        nickname: \"hero\"\n      },\n      content: \"얼른 사고싶어요~\"\n    }]\n  }],\n  imagePaths: [],\n  postAdded: false\n}; // action type(action 이름)을 상수로 빼주면 switch문에서 재활용 가능\n\nconst ADD_POST = \"ADD_POST\";\nexport const addPost = {\n  type: ADD_POST\n};\nconst dummyPost = {\n  id: 2,\n  content: \"더미데이터입니다\",\n  User: {\n    id: 1,\n    nickname: \"제로초\"\n  },\n  Images: [],\n  Comments: []\n};\n\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case ADD_POST:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        // 앞에 추가해야 제일 위에 추가됨\n        mainPosts: [dummyPost, ...state.mainPosts],\n        postAdded: true\n      });\n\n    default:\n      return state;\n  }\n};\n\nexport default reducer;","map":{"version":3,"sources":["C:/Users/김승미/Desktop/SOPT/SoundPicker-Study/SoundPicker-FrontStudy/prepare/front/reducers/post.js"],"names":["initialState","mainPosts","id","User","nickname","content","Images","src","Comments","imagePaths","postAdded","ADD_POST","addPost","type","dummyPost","reducer","state","action"],"mappings":";;;;;;AAAA,OAAO,MAAMA,YAAY,GAAG;AAC1BC,EAAAA,SAAS,EAAE,CACT;AACEC,IAAAA,EAAE,EAAE,CADN;AAEEC,IAAAA,IAAI,EAAE;AACJD,MAAAA,EAAE,EAAE,CADA;AAEJE,MAAAA,QAAQ,EAAE;AAFN,KAFR;AAMEC,IAAAA,OAAO,EAAE,uBANX;AAOEC,IAAAA,MAAM,EAAE,CACN;AACEC,MAAAA,GAAG,EAAE;AADP,KADM,EAIN;AACEA,MAAAA,GAAG,EACD;AAFJ,KAJM,EAQN;AACEA,MAAAA,GAAG,EACD;AAFJ,KARM,CAPV;AAoBEC,IAAAA,QAAQ,EAAE,CACR;AACEL,MAAAA,IAAI,EAAE;AACJC,QAAAA,QAAQ,EAAE;AADN,OADR;AAIEC,MAAAA,OAAO,EAAE;AAJX,KADQ,EAOR;AACEF,MAAAA,IAAI,EAAE;AACJC,QAAAA,QAAQ,EAAE;AADN,OADR;AAIEC,MAAAA,OAAO,EAAE;AAJX,KAPQ;AApBZ,GADS,CADe;AAsC1BI,EAAAA,UAAU,EAAE,EAtCc;AAuC1BC,EAAAA,SAAS,EAAE;AAvCe,CAArB,C,CA0CP;;AACA,MAAMC,QAAQ,GAAG,UAAjB;AACA,OAAO,MAAMC,OAAO,GAAG;AACrBC,EAAAA,IAAI,EAAEF;AADe,CAAhB;AAIP,MAAMG,SAAS,GAAG;AAChBZ,EAAAA,EAAE,EAAE,CADY;AAEhBG,EAAAA,OAAO,EAAE,UAFO;AAGhBF,EAAAA,IAAI,EAAE;AACJD,IAAAA,EAAE,EAAE,CADA;AAEJE,IAAAA,QAAQ,EAAE;AAFN,GAHU;AAOhBE,EAAAA,MAAM,EAAE,EAPQ;AAQhBE,EAAAA,QAAQ,EAAE;AARM,CAAlB;;AAWA,MAAMO,OAAO,GAAG,CAACC,KAAK,GAAGhB,YAAT,EAAuBiB,MAAvB,KAAkC;AAChD,UAAQA,MAAM,CAACJ,IAAf;AACE,SAAKF,QAAL;AACE,6CACKK,KADL;AAEE;AACAf,QAAAA,SAAS,EAAE,CAACa,SAAD,EAAY,GAAGE,KAAK,CAACf,SAArB,CAHb;AAIES,QAAAA,SAAS,EAAE;AAJb;;AAMF;AACE,aAAOM,KAAP;AATJ;AAWD,CAZD;;AAcA,eAAeD,OAAf","sourcesContent":["export const initialState = {\r\n  mainPosts: [\r\n    {\r\n      id: 1,\r\n      User: {\r\n        id: 1,\r\n        nickname: \"제로초\",\r\n      },\r\n      content: \"첫 번째 게시글 #해시태그 #익스프레스\",\r\n      Images: [\r\n        {\r\n          src: \"https://www.daangn.com/images/meta/home/daangn.png\",\r\n        },\r\n        {\r\n          src:\r\n            \"https://user-images.githubusercontent.com/1305982/50403650-44804500-07db-11e9-98aa-cfee9a9aec69.png\",\r\n        },\r\n        {\r\n          src:\r\n            \"https://platum.kr/wp-content/uploads/2020/09/daangn_mau1000.jpg\",\r\n        },\r\n      ],\r\n      Comments: [\r\n        {\r\n          User: {\r\n            nickname: \"nero\",\r\n          },\r\n          content: \"우와 개정판이 나왔군요~\",\r\n        },\r\n        {\r\n          User: {\r\n            nickname: \"hero\",\r\n          },\r\n          content: \"얼른 사고싶어요~\",\r\n        },\r\n      ],\r\n    },\r\n  ],\r\n  imagePaths: [],\r\n  postAdded: false,\r\n};\r\n\r\n// action type(action 이름)을 상수로 빼주면 switch문에서 재활용 가능\r\nconst ADD_POST = \"ADD_POST\";\r\nexport const addPost = {\r\n  type: ADD_POST,\r\n};\r\n\r\nconst dummyPost = {\r\n  id: 2,\r\n  content: \"더미데이터입니다\",\r\n  User: {\r\n    id: 1,\r\n    nickname: \"제로초\",\r\n  },\r\n  Images: [],\r\n  Comments: [],\r\n};\r\n\r\nconst reducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case ADD_POST:\r\n      return {\r\n        ...state,\r\n        // 앞에 추가해야 제일 위에 추가됨\r\n        mainPosts: [dummyPost, ...state.mainPosts],\r\n        postAdded: true,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default reducer;\r\n"]},"metadata":{},"sourceType":"module"}