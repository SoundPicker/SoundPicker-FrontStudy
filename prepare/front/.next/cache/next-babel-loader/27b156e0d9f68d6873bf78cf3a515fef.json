{"ast":null,"code":"import { all, fork, call, put, takeLatest, delay } from 'redux-saga/effects';\nimport axios from 'axios';\nimport { LOG_IN_REQUEST, LOG_IN_SUCCESS, LOG_IN_FAILURE, LOG_OUT_REQUEST, LOG_OUT_SUCCESS, LOG_OUT_FAILURE, SIGN_UP_REQUEST, SIGN_UP_SUCCESS, SIGN_UP_FAILURE, FOLLOW_REQUEST, FOLLOW_SUCCESS, FOLLOW_FAILURE, UNFOLLOW_REQUEST, UNFOLLOW_SUCCESS, UNFOLLOW_FAILURE, LOAD_MY_INFO_SUCCESS, LOAD_MY_INFO_REQUEST, LOAD_MY_INFO_FAILURE, CHANGE_NICKNAME_REQUEST, CHANGE_NICKNAME_SUCCESS, CHANGE_NICKNAME_FAILURE } from '../reducers/user';\n\nfunction loginAPI(data) {\n  return axios.post('/user/login', data);\n}\n\nfunction* logIn(action) {\n  try {\n    //call은 동기라 return할때까지 기다렸다 넣어줌, fork는 비동기라 결과 오기 전에 바로 다음 거 실행\n    const result = yield call(loginAPI, action.data);\n    yield put({\n      type: LOG_IN_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    yield put({\n      //put은 dispatch 개념\n      type: LOG_IN_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction logoutAPI() {\n  return axios.post('/user/logout');\n}\n\nfunction* logOut() {\n  try {\n    yield call(logoutAPI); //call은 동기라 return할때까지 기다렸다 넣어줌, fork는 비동기라 결과 오기 전에 바로 다음 거 실행\n\n    yield put({\n      type: LOG_OUT_SUCCESS\n    });\n  } catch (err) {\n    yield put({\n      //put은 dispatch 개념\n      type: LOG_OUT_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction signUpAPI(data) {\n  return axios.post('/user', data);\n}\n\nfunction* signUp(action) {\n  try {\n    const result = yield call(signUpAPI, action.data);\n    console.log(result);\n    yield put({\n      type: SIGN_UP_SUCCESS\n    });\n  } catch (err) {\n    yield put({\n      type: SIGN_UP_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction loadMyInfoAPI() {\n  return axios.get('/user');\n}\n\nfunction* loadMyInfo() {\n  try {\n    const result = yield call(loadMyInfoAPI);\n    yield put({\n      type: LOAD_MY_INFO_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    yield put({\n      type: LOAD_MY_INFO_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction* unfollow(action) {\n  try {\n    yield put({\n      type: UNFOLLOW_SUCCESS,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: UNFOLLOW_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction* follow(action) {\n  try {\n    yield put({\n      type: FOLLOW_SUCCESS,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: FOLLOW_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction changeNicknameAPI(data) {\n  return axios.patch('/user/nickname', {\n    nickname: data\n  });\n}\n\nfunction* changeNickname(action) {\n  try {\n    const result = yield call(changeNicknameAPI, action.data);\n    yield put({\n      type: CHANGE_NICKNAME_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    yield put({\n      type: CHANGE_NICKNAME_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction* watchLogIn() {\n  yield takeLatest(LOG_IN_REQUEST, logIn); //LOG_IN이라는 action이 실행될때까지 기다리겠다\n}\n\nfunction* watchLogOut() {\n  yield takeLatest(LOG_OUT_REQUEST, logOut);\n}\n\nfunction* watchSignUp() {\n  yield takeLatest(SIGN_UP_REQUEST, signUp);\n}\n\nfunction* watchLoadMyInfo() {\n  yield takeLatest(LOAD_MY_INFO_REQUEST, loadMyInfo);\n}\n\nfunction* watchFollow() {\n  yield takeLatest(FOLLOW_REQUEST, follow);\n}\n\nfunction* watchUnfollow() {\n  yield takeLatest(UNFOLLOW_REQUEST, unfollow);\n}\n\nfunction* watchChangeNickname() {\n  yield takeLatest(CHANGE_NICKNAME_REQUEST, changeNickname);\n}\n\nexport default function* userSaga() {\n  yield all([fork(watchLogIn), fork(watchLogOut), fork(watchSignUp), fork(watchLoadMyInfo), fork(watchFollow), fork(watchUnfollow), fork(watchChangeNickname)]);\n}","map":{"version":3,"sources":["C:/Users/김승미/Desktop/SOPT/SoundPicker-Study/SoundPicker-FrontStudy/prepare/front/sagas/user.js"],"names":["all","fork","call","put","takeLatest","delay","axios","LOG_IN_REQUEST","LOG_IN_SUCCESS","LOG_IN_FAILURE","LOG_OUT_REQUEST","LOG_OUT_SUCCESS","LOG_OUT_FAILURE","SIGN_UP_REQUEST","SIGN_UP_SUCCESS","SIGN_UP_FAILURE","FOLLOW_REQUEST","FOLLOW_SUCCESS","FOLLOW_FAILURE","UNFOLLOW_REQUEST","UNFOLLOW_SUCCESS","UNFOLLOW_FAILURE","LOAD_MY_INFO_SUCCESS","LOAD_MY_INFO_REQUEST","LOAD_MY_INFO_FAILURE","CHANGE_NICKNAME_REQUEST","CHANGE_NICKNAME_SUCCESS","CHANGE_NICKNAME_FAILURE","loginAPI","data","post","logIn","action","result","type","err","error","response","logoutAPI","logOut","signUpAPI","signUp","console","log","loadMyInfoAPI","get","loadMyInfo","unfollow","follow","changeNicknameAPI","patch","nickname","changeNickname","watchLogIn","watchLogOut","watchSignUp","watchLoadMyInfo","watchFollow","watchUnfollow","watchChangeNickname","userSaga"],"mappings":"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","sourcesContent":["import { all, fork, call, put, takeLatest, delay } from 'redux-saga/effects';\r\nimport axios from 'axios';\r\n\r\nimport {\r\n  LOG_IN_REQUEST,\r\n  LOG_IN_SUCCESS,\r\n  LOG_IN_FAILURE,\r\n  LOG_OUT_REQUEST,\r\n  LOG_OUT_SUCCESS,\r\n  LOG_OUT_FAILURE,\r\n  SIGN_UP_REQUEST,\r\n  SIGN_UP_SUCCESS,\r\n  SIGN_UP_FAILURE,\r\n  FOLLOW_REQUEST,\r\n  FOLLOW_SUCCESS,\r\n  FOLLOW_FAILURE,\r\n  UNFOLLOW_REQUEST,\r\n  UNFOLLOW_SUCCESS,\r\n  UNFOLLOW_FAILURE,\r\n  LOAD_MY_INFO_SUCCESS,\r\n  LOAD_MY_INFO_REQUEST,\r\n  LOAD_MY_INFO_FAILURE,\r\n  CHANGE_NICKNAME_REQUEST,\r\n  CHANGE_NICKNAME_SUCCESS,\r\n  CHANGE_NICKNAME_FAILURE,\r\n} from '../reducers/user';\r\n\r\nfunction loginAPI(data) {\r\n  return axios.post('/user/login', data);\r\n}\r\n\r\nfunction* logIn(action) {\r\n  try {\r\n    //call은 동기라 return할때까지 기다렸다 넣어줌, fork는 비동기라 결과 오기 전에 바로 다음 거 실행\r\n    const result = yield call(loginAPI, action.data);\r\n    yield put({\r\n      type: LOG_IN_SUCCESS,\r\n      data: result.data,\r\n    });\r\n  } catch (err) {\r\n    yield put({\r\n      //put은 dispatch 개념\r\n      type: LOG_IN_FAILURE,\r\n      error: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction logoutAPI() {\r\n  return axios.post('/user/logout');\r\n}\r\n\r\nfunction* logOut() {\r\n  try {\r\n    yield call(logoutAPI); //call은 동기라 return할때까지 기다렸다 넣어줌, fork는 비동기라 결과 오기 전에 바로 다음 거 실행\r\n    yield put({\r\n      type: LOG_OUT_SUCCESS,\r\n    });\r\n  } catch (err) {\r\n    yield put({\r\n      //put은 dispatch 개념\r\n      type: LOG_OUT_FAILURE,\r\n      error: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction signUpAPI(data) {\r\n  return axios.post('/user', data);\r\n}\r\n\r\nfunction* signUp(action) {\r\n  try {\r\n    const result = yield call(signUpAPI, action.data);\r\n    console.log(result);\r\n    yield put({\r\n      type: SIGN_UP_SUCCESS,\r\n    });\r\n  } catch (err) {\r\n    yield put({\r\n      type: SIGN_UP_FAILURE,\r\n      error: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction loadMyInfoAPI() {\r\n  return axios.get('/user');\r\n}\r\n\r\nfunction* loadMyInfo() {\r\n  try {\r\n    const result = yield call(loadMyInfoAPI);\r\n    yield put({\r\n      type: LOAD_MY_INFO_SUCCESS,\r\n      data: result.data,\r\n    });\r\n  } catch (err) {\r\n    yield put({\r\n      type: LOAD_MY_INFO_FAILURE,\r\n      error: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction* unfollow(action) {\r\n  try {\r\n    yield put({\r\n      type: UNFOLLOW_SUCCESS,\r\n      data: action.data,\r\n    });\r\n  } catch (err) {\r\n    yield put({\r\n      type: UNFOLLOW_FAILURE,\r\n      error: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction* follow(action) {\r\n  try {\r\n    yield put({\r\n      type: FOLLOW_SUCCESS,\r\n      data: action.data,\r\n    });\r\n  } catch (err) {\r\n    yield put({\r\n      type: FOLLOW_FAILURE,\r\n      error: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction changeNicknameAPI(data) {\r\n  return axios.patch('/user/nickname', { nickname: data });\r\n}\r\n\r\nfunction* changeNickname(action) {\r\n  try {\r\n    const result = yield call(changeNicknameAPI, action.data);\r\n    yield put({\r\n      type: CHANGE_NICKNAME_SUCCESS,\r\n      data: result.data,\r\n    });\r\n  } catch (err) {\r\n    yield put({\r\n      type: CHANGE_NICKNAME_FAILURE,\r\n      error: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchLogIn() {\r\n  yield takeLatest(LOG_IN_REQUEST, logIn); //LOG_IN이라는 action이 실행될때까지 기다리겠다\r\n}\r\n\r\nfunction* watchLogOut() {\r\n  yield takeLatest(LOG_OUT_REQUEST, logOut);\r\n}\r\n\r\nfunction* watchSignUp() {\r\n  yield takeLatest(SIGN_UP_REQUEST, signUp);\r\n}\r\n\r\nfunction* watchLoadMyInfo() {\r\n  yield takeLatest(LOAD_MY_INFO_REQUEST, loadMyInfo);\r\n}\r\n\r\nfunction* watchFollow() {\r\n  yield takeLatest(FOLLOW_REQUEST, follow);\r\n}\r\n\r\nfunction* watchUnfollow() {\r\n  yield takeLatest(UNFOLLOW_REQUEST, unfollow);\r\n}\r\n\r\nfunction* watchChangeNickname() {\r\n  yield takeLatest(CHANGE_NICKNAME_REQUEST, changeNickname);\r\n}\r\n\r\nexport default function* userSaga() {\r\n  yield all([\r\n    fork(watchLogIn),\r\n    fork(watchLogOut),\r\n    fork(watchSignUp),\r\n    fork(watchLoadMyInfo),\r\n    fork(watchFollow),\r\n    fork(watchUnfollow),\r\n    fork(watchChangeNickname),\r\n  ]);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}