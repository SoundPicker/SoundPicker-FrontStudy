{"ast":null,"code":"import produce from 'immer';\nexport var initialState = {\n  mainPosts: [],\n  singlePost: null,\n  imagePaths: [],\n  hasMorePost: true,\n  loadPostLoading: false,\n  loadPostDone: false,\n  loadPostError: null,\n  loadPostsLoading: false,\n  loadPostsDone: false,\n  loadPostsError: null,\n  addPostLoading: false,\n  addPostDone: false,\n  addPostError: null,\n  removePostLoading: false,\n  removePostDone: false,\n  removePostError: null,\n  likePostLoading: false,\n  likePostDone: false,\n  likePostError: null,\n  unlikePostLoading: false,\n  unlikePostDone: false,\n  unlikePostError: null,\n  uploadImagesLoading: false,\n  uploadImagesDone: false,\n  uploadImagesError: null,\n  addCommentLoading: false,\n  addCommentDone: false,\n  addCommentError: null,\n  retweetLoading: false,\n  retweetDone: false,\n  retweetError: null\n};\ninitialState.mainPosts = initialState.mainPosts.concat(); // action type(action 이름)을 상수로 빼주면 switch문에서 재활용 가능\n\nexport var LOAD_POST_REQUEST = 'LOAD_POST_REQUEST';\nexport var LOAD_POST_SUCCESS = 'LOAD_POST_SUCCESS';\nexport var LOAD_POST_FAILURE = 'LOAD_POST_FAILURE';\nexport var LOAD_POSTS_REQUEST = 'LOAD_POSTS_REQUEST';\nexport var LOAD_POSTS_SUCCESS = 'LOAD_POSTS_SUCCESS';\nexport var LOAD_POSTS_FAILURE = 'LOAD_POSTS_FAILURE';\nexport var LOAD_USER_POSTS_REQUEST = 'LOAD_USER_POSTS_REQUEST';\nexport var LOAD_USER_POSTS_SUCCESS = 'LOAD_USER_POSTS_SUCCESS';\nexport var LOAD_USER_POSTS_FAILURE = 'LOAD_USER_POSTS_FAILURE';\nexport var LOAD_HASHTAG_POSTS_REQUEST = 'LOAD_HASHTAG_POSTS_REQUEST';\nexport var LOAD_HASHTAG_POSTS_SUCCESS = 'LOAD_HASHTAG_POSTS_SUCCESS';\nexport var LOAD_HASHTAG_POSTS_FAILURE = 'LOAD_HASHTAG_POSTS_FAILURE';\nexport var ADD_POST_REQUEST = 'ADD_POST_REQUEST';\nexport var ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\nexport var ADD_POST_FAILURE = 'ADD_POST_FAILURE';\nexport var REMOVE_POST_REQUEST = 'REMOVE_POST_REQUEST';\nexport var REMOVE_POST_SUCCESS = 'REMOVE_POST_SUCCESS';\nexport var REMOVE_POST_FAILURE = 'REMOVE_POST_FAILURE';\nexport var LIKE_POST_REQUEST = 'LIKE_POST_REQUEST';\nexport var LIKE_POST_SUCCESS = 'LIKE_POST_SUCCESS';\nexport var LIKE_POST_FAILURE = 'LIKE_POST_FAILURE';\nexport var UNLIKE_POST_REQUEST = 'UNLIKE_POST_REQUEST';\nexport var UNLIKE_POST_SUCCESS = 'UNLIKE_POST_SUCCESS';\nexport var UNLIKE_POST_FAILURE = 'UNLIKE_POST_FAILURE';\nexport var UPLOAD_IMAGES_REQUEST = 'UPLOAD_IMAGES_REQUEST';\nexport var UPLOAD_IMAGES_SUCCESS = 'UPLOAD_IMAGES_SUCCESS';\nexport var UPLOAD_IMAGES_FAILURE = 'UPLOAD_IMAGES_FAILURE';\nexport var REMOVE_IMAGE = 'REMOVE_IMAGE';\nexport var ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST';\nexport var ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS';\nexport var ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE';\nexport var RETWEET_REQUEST = 'RETWEET_REQUEST';\nexport var RETWEET_SUCCESS = 'RETWEET_SUCCESS';\nexport var RETWEET_FAILURE = 'RETWEET_FAILURE';\nexport var addPostRequestAction = function addPostRequestAction(data) {\n  return {\n    type: ADD_POST_REQUEST,\n    data: data\n  };\n};\nexport var addCommentRequestAction = function addCommentRequestAction(data) {\n  return {\n    type: ADD_COMMENT_REQUEST,\n    data: data\n  };\n}; // 이전 상태를 액션을 통해 다음 상태로 만들어내는 함수(불변성은 지키면서)\n\nvar reducer = function reducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n  return produce(state, function (draft) {\n    // state의 이름이 draft로 바뀌고, 불변성과 상관없이 막 바꿔도 됨\n    // immer가 알아서 불변성 지키면서 다음 상태로 만들어줌\n    // 그래서 state는 건들지 말고 draft만 바꾸면 된다.\n    switch (action.type) {\n      case LOAD_POST_REQUEST:\n        draft.loadPostLoading = true;\n        draft.loadPostDone = false;\n        draft.loadPostError = null;\n        break;\n\n      case LOAD_POST_SUCCESS:\n        draft.loadPostLoading = false;\n        draft.loadPostDone = true;\n        draft.singlePost = action.data;\n        break;\n\n      case LOAD_POST_FAILURE:\n        draft.loadPostLoading = false;\n        draft.loadPostError = action.error;\n        break;\n\n      case LOAD_HASHTAG_POSTS_REQUEST:\n      case LOAD_USER_POSTS_REQUEST:\n      case LOAD_POSTS_REQUEST:\n        draft.loadPostsLoading = true;\n        draft.loadPostsDone = false;\n        draft.loadPostsError = null;\n        break;\n\n      case LOAD_HASHTAG_POSTS_SUCCESS:\n      case LOAD_USER_POSTS_SUCCESS:\n      case LOAD_POSTS_SUCCESS:\n        draft.loadPostsLoading = false;\n        draft.loadPostsDone = true;\n        draft.mainPosts = draft.mainPosts.concat(action.data);\n        draft.hasMorePost = action.data.length === 10;\n        break;\n\n      case LOAD_HASHTAG_POSTS_FAILURE:\n      case LOAD_USER_POSTS_FAILURE:\n      case LOAD_POSTS_FAILURE:\n        draft.loadPostsLoading = false;\n        draft.loadPostsError = action.error;\n        break;\n\n      case ADD_POST_REQUEST:\n        draft.addPostLoading = true;\n        draft.addPostDone = false;\n        draft.addPostError = null;\n        break;\n\n      case ADD_POST_SUCCESS:\n        draft.addPostLoading = false;\n        draft.addPostDone = true; // 앞에 추가해야 제일 위에 추가됨\n\n        draft.mainPosts.unshift(action.data);\n        draft.imagePaths = [];\n        break;\n\n      case ADD_POST_FAILURE:\n        draft.addPostLoading = false;\n        draft.addPostError = action.error;\n        break;\n\n      case REMOVE_POST_REQUEST:\n        draft.removePostLoading = true;\n        draft.removePostDone = false;\n        draft.removePostError = null;\n        break;\n\n      case REMOVE_POST_SUCCESS:\n        draft.removePostLoading = false;\n        draft.removePostDone = true;\n        draft.mainPosts = draft.mainPosts.filter(function (v) {\n          return v.id !== action.data.PostId;\n        });\n        break;\n\n      case REMOVE_POST_FAILURE:\n        draft.removePostLoading = false;\n        draft.removePostError = action.error;\n        break;\n\n      case LIKE_POST_REQUEST:\n        draft.likePostLoading = true;\n        draft.likePostDone = false;\n        draft.likePostError = null;\n        break;\n\n      case LIKE_POST_SUCCESS:\n        {\n          var post = draft.mainPosts.find(function (v) {\n            return v.id === action.data.PostId;\n          });\n          post.Likers.push({\n            id: action.data.UserId\n          });\n          draft.likePostLoading = false;\n          draft.likePostDone = true;\n          break;\n        }\n\n      case LIKE_POST_FAILURE:\n        draft.likePostLoading = false;\n        draft.likePostError = action.error;\n        break;\n\n      case UNLIKE_POST_REQUEST:\n        draft.unlikePostLoading = true;\n        draft.unlikePostDone = false;\n        draft.unlikePostError = null;\n        break;\n\n      case UNLIKE_POST_SUCCESS:\n        {\n          var _post = draft.mainPosts.find(function (v) {\n            return v.id === action.data.PostId;\n          });\n\n          _post.Likers = _post.Likers.filter(function (v) {\n            return v.id !== action.data.UserId;\n          });\n          draft.unlikePostLoading = false;\n          draft.unlikePostDone = true;\n          break;\n        }\n\n      case UNLIKE_POST_FAILURE:\n        draft.unlikePostLoading = false;\n        draft.unlikePostError = action.error;\n        break;\n\n      case UPLOAD_IMAGES_REQUEST:\n        draft.uploadImagesLoading = true;\n        draft.uploadImagesDone = false;\n        draft.uploadImagesError = null;\n        break;\n\n      case UPLOAD_IMAGES_SUCCESS:\n        {\n          draft.imagePaths = action.data;\n          draft.uploadImagesLoading = false;\n          draft.uploadImagesDone = true;\n          break;\n        }\n\n      case UPLOAD_IMAGES_FAILURE:\n        draft.uploadImagesLoading = false;\n        draft.uploadImagesError = action.error;\n        break;\n\n      case RETWEET_REQUEST:\n        draft.retweetLoading = true;\n        draft.retweetDone = false;\n        draft.retweetError = null;\n        break;\n\n      case RETWEET_SUCCESS:\n        {\n          draft.retweetLoading = false;\n          draft.retweetDone = true;\n          draft.mainPosts.unshift(action.data);\n          break;\n        }\n\n      case RETWEET_FAILURE:\n        draft.retweetLoading = false;\n        draft.retweetError = action.error;\n        break;\n\n      case REMOVE_IMAGE:\n        draft.imagePaths = draft.imagePaths.filter(function (v, i) {\n          return i !== action.data;\n        });\n        break;\n\n      case ADD_COMMENT_REQUEST:\n        draft.addCommentLoading = true;\n        draft.addCommentDone = false;\n        draft.addCommentError = null;\n        break;\n\n      case ADD_COMMENT_SUCCESS:\n        {\n          var _post2 = draft.mainPosts.find(function (v) {\n            return v.id === action.data.PostId;\n          });\n\n          _post2.Comments.unshift(action.data);\n\n          draft.addCommentLoading = false;\n          draft.addCommentDone = true;\n          break;\n        }\n      // 불변성을 지키기 위해 원래는 아래와 같이 작성해야 했음\n      // const postIndex = state.mainPosts.findIndex((v) => v.id === action.data.postId);\n      // const post = { ...state.mainPosts[postIndex] };\n      // post.Comments = [dummyComment(action.data.content), ...post.Comments];\n      // mainPosts = [...state.mainPosts];\n      // mainPosts[postIndex] = post;\n\n      case ADD_COMMENT_FAILURE:\n        draft.addCommentLoading = false;\n        draft.addCommentError = action.error;\n        break;\n\n      default:\n        break;\n    }\n  });\n};\n\nexport default reducer;","map":{"version":3,"sources":["C:/Users/김승미/Desktop/SOPT/SoundPicker-Study/SoundPicker-FrontStudy/prepare/front/reducers/post.js"],"names":["produce","initialState","mainPosts","singlePost","imagePaths","hasMorePost","loadPostLoading","loadPostDone","loadPostError","loadPostsLoading","loadPostsDone","loadPostsError","addPostLoading","addPostDone","addPostError","removePostLoading","removePostDone","removePostError","likePostLoading","likePostDone","likePostError","unlikePostLoading","unlikePostDone","unlikePostError","uploadImagesLoading","uploadImagesDone","uploadImagesError","addCommentLoading","addCommentDone","addCommentError","retweetLoading","retweetDone","retweetError","concat","LOAD_POST_REQUEST","LOAD_POST_SUCCESS","LOAD_POST_FAILURE","LOAD_POSTS_REQUEST","LOAD_POSTS_SUCCESS","LOAD_POSTS_FAILURE","LOAD_USER_POSTS_REQUEST","LOAD_USER_POSTS_SUCCESS","LOAD_USER_POSTS_FAILURE","LOAD_HASHTAG_POSTS_REQUEST","LOAD_HASHTAG_POSTS_SUCCESS","LOAD_HASHTAG_POSTS_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","LIKE_POST_REQUEST","LIKE_POST_SUCCESS","LIKE_POST_FAILURE","UNLIKE_POST_REQUEST","UNLIKE_POST_SUCCESS","UNLIKE_POST_FAILURE","UPLOAD_IMAGES_REQUEST","UPLOAD_IMAGES_SUCCESS","UPLOAD_IMAGES_FAILURE","REMOVE_IMAGE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","RETWEET_REQUEST","RETWEET_SUCCESS","RETWEET_FAILURE","addPostRequestAction","data","type","addCommentRequestAction","reducer","state","action","draft","error","length","unshift","filter","v","id","PostId","post","find","Likers","push","UserId","i","Comments"],"mappings":"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","sourcesContent":["import produce from 'immer';\r\n\r\nexport const initialState = {\r\n  mainPosts: [],\r\n  singlePost: null,\r\n  imagePaths: [],\r\n  hasMorePost: true,\r\n  loadPostLoading: false,\r\n  loadPostDone: false,\r\n  loadPostError: null,\r\n  loadPostsLoading: false,\r\n  loadPostsDone: false,\r\n  loadPostsError: null,\r\n  addPostLoading: false,\r\n  addPostDone: false,\r\n  addPostError: null,\r\n  removePostLoading: false,\r\n  removePostDone: false,\r\n  removePostError: null,\r\n  likePostLoading: false,\r\n  likePostDone: false,\r\n  likePostError: null,\r\n  unlikePostLoading: false,\r\n  unlikePostDone: false,\r\n  unlikePostError: null,\r\n  uploadImagesLoading: false,\r\n  uploadImagesDone: false,\r\n  uploadImagesError: null,\r\n  addCommentLoading: false,\r\n  addCommentDone: false,\r\n  addCommentError: null,\r\n  retweetLoading: false,\r\n  retweetDone: false,\r\n  retweetError: null,\r\n};\r\n\r\ninitialState.mainPosts = initialState.mainPosts.concat();\r\n\r\n// action type(action 이름)을 상수로 빼주면 switch문에서 재활용 가능\r\nexport const LOAD_POST_REQUEST = 'LOAD_POST_REQUEST';\r\nexport const LOAD_POST_SUCCESS = 'LOAD_POST_SUCCESS';\r\nexport const LOAD_POST_FAILURE = 'LOAD_POST_FAILURE';\r\n\r\nexport const LOAD_POSTS_REQUEST = 'LOAD_POSTS_REQUEST';\r\nexport const LOAD_POSTS_SUCCESS = 'LOAD_POSTS_SUCCESS';\r\nexport const LOAD_POSTS_FAILURE = 'LOAD_POSTS_FAILURE';\r\n\r\nexport const LOAD_USER_POSTS_REQUEST = 'LOAD_USER_POSTS_REQUEST';\r\nexport const LOAD_USER_POSTS_SUCCESS = 'LOAD_USER_POSTS_SUCCESS';\r\nexport const LOAD_USER_POSTS_FAILURE = 'LOAD_USER_POSTS_FAILURE';\r\n\r\nexport const LOAD_HASHTAG_POSTS_REQUEST = 'LOAD_HASHTAG_POSTS_REQUEST';\r\nexport const LOAD_HASHTAG_POSTS_SUCCESS = 'LOAD_HASHTAG_POSTS_SUCCESS';\r\nexport const LOAD_HASHTAG_POSTS_FAILURE = 'LOAD_HASHTAG_POSTS_FAILURE';\r\n\r\nexport const ADD_POST_REQUEST = 'ADD_POST_REQUEST';\r\nexport const ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\r\nexport const ADD_POST_FAILURE = 'ADD_POST_FAILURE';\r\n\r\nexport const REMOVE_POST_REQUEST = 'REMOVE_POST_REQUEST';\r\nexport const REMOVE_POST_SUCCESS = 'REMOVE_POST_SUCCESS';\r\nexport const REMOVE_POST_FAILURE = 'REMOVE_POST_FAILURE';\r\n\r\nexport const LIKE_POST_REQUEST = 'LIKE_POST_REQUEST';\r\nexport const LIKE_POST_SUCCESS = 'LIKE_POST_SUCCESS';\r\nexport const LIKE_POST_FAILURE = 'LIKE_POST_FAILURE';\r\n\r\nexport const UNLIKE_POST_REQUEST = 'UNLIKE_POST_REQUEST';\r\nexport const UNLIKE_POST_SUCCESS = 'UNLIKE_POST_SUCCESS';\r\nexport const UNLIKE_POST_FAILURE = 'UNLIKE_POST_FAILURE';\r\n\r\nexport const UPLOAD_IMAGES_REQUEST = 'UPLOAD_IMAGES_REQUEST';\r\nexport const UPLOAD_IMAGES_SUCCESS = 'UPLOAD_IMAGES_SUCCESS';\r\nexport const UPLOAD_IMAGES_FAILURE = 'UPLOAD_IMAGES_FAILURE';\r\n\r\nexport const REMOVE_IMAGE = 'REMOVE_IMAGE';\r\n\r\nexport const ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST';\r\nexport const ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS';\r\nexport const ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE';\r\n\r\nexport const RETWEET_REQUEST = 'RETWEET_REQUEST';\r\nexport const RETWEET_SUCCESS = 'RETWEET_SUCCESS';\r\nexport const RETWEET_FAILURE = 'RETWEET_FAILURE';\r\n\r\nexport const addPostRequestAction = (data) => ({\r\n  type: ADD_POST_REQUEST,\r\n  data,\r\n});\r\n\r\nexport const addCommentRequestAction = (data) => ({\r\n  type: ADD_COMMENT_REQUEST,\r\n  data,\r\n});\r\n\r\n// 이전 상태를 액션을 통해 다음 상태로 만들어내는 함수(불변성은 지키면서)\r\nconst reducer = (state = initialState, action) =>\r\n  produce(state, (draft) => {\r\n    // state의 이름이 draft로 바뀌고, 불변성과 상관없이 막 바꿔도 됨\r\n    // immer가 알아서 불변성 지키면서 다음 상태로 만들어줌\r\n    // 그래서 state는 건들지 말고 draft만 바꾸면 된다.\r\n    switch (action.type) {\r\n      case LOAD_POST_REQUEST:\r\n        draft.loadPostLoading = true;\r\n        draft.loadPostDone = false;\r\n        draft.loadPostError = null;\r\n        break;\r\n      case LOAD_POST_SUCCESS:\r\n        draft.loadPostLoading = false;\r\n        draft.loadPostDone = true;\r\n        draft.singlePost = action.data;\r\n        break;\r\n      case LOAD_POST_FAILURE:\r\n        draft.loadPostLoading = false;\r\n        draft.loadPostError = action.error;\r\n        break;\r\n      case LOAD_HASHTAG_POSTS_REQUEST:\r\n      case LOAD_USER_POSTS_REQUEST:\r\n      case LOAD_POSTS_REQUEST:\r\n        draft.loadPostsLoading = true;\r\n        draft.loadPostsDone = false;\r\n        draft.loadPostsError = null;\r\n        break;\r\n      case LOAD_HASHTAG_POSTS_SUCCESS:\r\n      case LOAD_USER_POSTS_SUCCESS:\r\n      case LOAD_POSTS_SUCCESS:\r\n        draft.loadPostsLoading = false;\r\n        draft.loadPostsDone = true;\r\n        draft.mainPosts = draft.mainPosts.concat(action.data);\r\n        draft.hasMorePost = action.data.length === 10;\r\n        break;\r\n      case LOAD_HASHTAG_POSTS_FAILURE:\r\n      case LOAD_USER_POSTS_FAILURE:\r\n      case LOAD_POSTS_FAILURE:\r\n        draft.loadPostsLoading = false;\r\n        draft.loadPostsError = action.error;\r\n        break;\r\n      case ADD_POST_REQUEST:\r\n        draft.addPostLoading = true;\r\n        draft.addPostDone = false;\r\n        draft.addPostError = null;\r\n        break;\r\n      case ADD_POST_SUCCESS:\r\n        draft.addPostLoading = false;\r\n        draft.addPostDone = true;\r\n        // 앞에 추가해야 제일 위에 추가됨\r\n        draft.mainPosts.unshift(action.data);\r\n        draft.imagePaths = [];\r\n        break;\r\n      case ADD_POST_FAILURE:\r\n        draft.addPostLoading = false;\r\n        draft.addPostError = action.error;\r\n        break;\r\n      case REMOVE_POST_REQUEST:\r\n        draft.removePostLoading = true;\r\n        draft.removePostDone = false;\r\n        draft.removePostError = null;\r\n        break;\r\n      case REMOVE_POST_SUCCESS:\r\n        draft.removePostLoading = false;\r\n        draft.removePostDone = true;\r\n        draft.mainPosts = draft.mainPosts.filter(\r\n          (v) => v.id !== action.data.PostId\r\n        );\r\n        break;\r\n      case REMOVE_POST_FAILURE:\r\n        draft.removePostLoading = false;\r\n        draft.removePostError = action.error;\r\n        break;\r\n      case LIKE_POST_REQUEST:\r\n        draft.likePostLoading = true;\r\n        draft.likePostDone = false;\r\n        draft.likePostError = null;\r\n        break;\r\n      case LIKE_POST_SUCCESS: {\r\n        const post = draft.mainPosts.find((v) => v.id === action.data.PostId);\r\n        post.Likers.push({ id: action.data.UserId });\r\n        draft.likePostLoading = false;\r\n        draft.likePostDone = true;\r\n        break;\r\n      }\r\n      case LIKE_POST_FAILURE:\r\n        draft.likePostLoading = false;\r\n        draft.likePostError = action.error;\r\n        break;\r\n      case UNLIKE_POST_REQUEST:\r\n        draft.unlikePostLoading = true;\r\n        draft.unlikePostDone = false;\r\n        draft.unlikePostError = null;\r\n        break;\r\n      case UNLIKE_POST_SUCCESS: {\r\n        const post = draft.mainPosts.find((v) => v.id === action.data.PostId);\r\n        post.Likers = post.Likers.filter((v) => v.id !== action.data.UserId);\r\n        draft.unlikePostLoading = false;\r\n        draft.unlikePostDone = true;\r\n        break;\r\n      }\r\n      case UNLIKE_POST_FAILURE:\r\n        draft.unlikePostLoading = false;\r\n        draft.unlikePostError = action.error;\r\n        break;\r\n      case UPLOAD_IMAGES_REQUEST:\r\n        draft.uploadImagesLoading = true;\r\n        draft.uploadImagesDone = false;\r\n        draft.uploadImagesError = null;\r\n        break;\r\n      case UPLOAD_IMAGES_SUCCESS: {\r\n        draft.imagePaths = action.data;\r\n        draft.uploadImagesLoading = false;\r\n        draft.uploadImagesDone = true;\r\n        break;\r\n      }\r\n      case UPLOAD_IMAGES_FAILURE:\r\n        draft.uploadImagesLoading = false;\r\n        draft.uploadImagesError = action.error;\r\n        break;\r\n      case RETWEET_REQUEST:\r\n        draft.retweetLoading = true;\r\n        draft.retweetDone = false;\r\n        draft.retweetError = null;\r\n        break;\r\n      case RETWEET_SUCCESS: {\r\n        draft.retweetLoading = false;\r\n        draft.retweetDone = true;\r\n        draft.mainPosts.unshift(action.data);\r\n        break;\r\n      }\r\n      case RETWEET_FAILURE:\r\n        draft.retweetLoading = false;\r\n        draft.retweetError = action.error;\r\n        break;\r\n      case REMOVE_IMAGE:\r\n        draft.imagePaths = draft.imagePaths.filter((v, i) => i !== action.data);\r\n        break;\r\n      case ADD_COMMENT_REQUEST:\r\n        draft.addCommentLoading = true;\r\n        draft.addCommentDone = false;\r\n        draft.addCommentError = null;\r\n        break;\r\n      case ADD_COMMENT_SUCCESS: {\r\n        const post = draft.mainPosts.find((v) => v.id === action.data.PostId);\r\n        post.Comments.unshift(action.data);\r\n        draft.addCommentLoading = false;\r\n        draft.addCommentDone = true;\r\n        break;\r\n      }\r\n      // 불변성을 지키기 위해 원래는 아래와 같이 작성해야 했음\r\n      // const postIndex = state.mainPosts.findIndex((v) => v.id === action.data.postId);\r\n      // const post = { ...state.mainPosts[postIndex] };\r\n      // post.Comments = [dummyComment(action.data.content), ...post.Comments];\r\n      // mainPosts = [...state.mainPosts];\r\n      // mainPosts[postIndex] = post;\r\n      case ADD_COMMENT_FAILURE:\r\n        draft.addCommentLoading = false;\r\n        draft.addCommentError = action.error;\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  });\r\n\r\nexport default reducer;\r\n"]},"metadata":{},"sourceType":"module"}