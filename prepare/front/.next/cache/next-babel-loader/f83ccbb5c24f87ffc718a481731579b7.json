{"ast":null,"code":"import { all, fork, put, takeLatest, delay } from 'redux-saga//effects';\nimport axios from 'axios';\nimport shortId from 'shortid';\nimport { ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE, REMOVE_POST_REQUEST, REMOVE_POST_SUCCESS, REMOVE_POST_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE, LOAD_POSTS_REQUEST, LOAD_POSTS_SUCCESS, LOAD_POSTS_FAILURE, generateDummyPost } from '../reducers/post';\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from '../reducers/user';\n\nfunction loadPostsAPI() {\n  return axios.get('/api/post');\n}\n\nfunction addPostAPI(data) {\n  return axios.post('/api/post', data);\n}\n\nfunction removePostAPI(data) {\n  return axios.delete('/api/post', data);\n}\n\nfunction addCommentAPI(data) {\n  return axios.post('/api/post/${data.postId}/comment', data);\n}\n\nfunction* loadPosts() {\n  try {\n    // const result = yield call(loadPostsAPI);\n    yield put({\n      type: LOAD_POSTS_SUCCESS,\n      data: generateDummyPost(10)\n    });\n  } catch (err) {\n    yield put({\n      type: LOAD_POSTS_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction* addPost(action) {\n  try {\n    // call은 동기라 return할때까지 기다렸다 넣어줌\n    // fork는 비동기라 결과 오기 전에 바로 다음 거 실행\n    // const result = yield call(addPostAPI, action.data);\n    delay(1000);\n    const id = shortId.generate();\n    yield put({\n      type: ADD_POST_SUCCESS,\n      data: {\n        id,\n        content: action.data\n      }\n    });\n    yield put({\n      type: ADD_POST_TO_ME,\n      data: id\n    });\n  } catch (err) {\n    yield put({\n      // put은 dispatch 개념\n      type: ADD_POST_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction* removePost(action) {\n  try {\n    // const result = yield call(removePostAPI, action.data);\n    yield put({\n      type: REMOVE_POST_SUCCESS,\n      data: action.data\n    });\n    yield put({\n      type: REMOVE_POST_OF_ME,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: REMOVE_POST_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction* addComment(action) {\n  try {\n    // const result = yield call(addCommentAPI, action.data);\n    yield put({\n      type: ADD_COMMENT_SUCCESS,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction* watchLoadPosts() {\n  yield takeLatest(LOAD_POSTS_REQUEST, loadPosts);\n}\n\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n}\n\nfunction* watchRemovePost() {\n  yield takeLatest(REMOVE_POST_REQUEST, removePost);\n}\n\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\n\nexport default function* postSaga() {\n  yield all([fork(watchLoadPosts), fork(watchAddPost), fork(watchRemovePost), fork(watchAddComment)]);\n}","map":{"version":3,"sources":["C:/Users/김승미/Desktop/SOPT/SoundPicker-Study/SoundPicker-FrontStudy/prepare/front/sagas/post.js"],"names":["all","fork","put","takeLatest","delay","axios","shortId","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","LOAD_POSTS_REQUEST","LOAD_POSTS_SUCCESS","LOAD_POSTS_FAILURE","generateDummyPost","ADD_POST_TO_ME","REMOVE_POST_OF_ME","loadPostsAPI","get","addPostAPI","data","post","removePostAPI","delete","addCommentAPI","loadPosts","type","err","error","response","addPost","action","id","generate","content","removePost","addComment","watchLoadPosts","watchAddPost","watchRemovePost","watchAddComment","postSaga"],"mappings":"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","sourcesContent":["import { all, fork, put, takeLatest, delay } from 'redux-saga//effects';\r\nimport axios from 'axios';\r\nimport shortId from 'shortid';\r\n\r\nimport {\r\n  ADD_POST_REQUEST,\r\n  ADD_POST_SUCCESS,\r\n  ADD_POST_FAILURE,\r\n  REMOVE_POST_REQUEST,\r\n  REMOVE_POST_SUCCESS,\r\n  REMOVE_POST_FAILURE,\r\n  ADD_COMMENT_REQUEST,\r\n  ADD_COMMENT_SUCCESS,\r\n  ADD_COMMENT_FAILURE,\r\n  LOAD_POSTS_REQUEST,\r\n  LOAD_POSTS_SUCCESS,\r\n  LOAD_POSTS_FAILURE,\r\n  generateDummyPost,\r\n} from '../reducers/post';\r\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from '../reducers/user';\r\n\r\nfunction loadPostsAPI() {\r\n  return axios.get('/api/post');\r\n}\r\n\r\nfunction addPostAPI(data) {\r\n  return axios.post('/api/post', data);\r\n}\r\n\r\nfunction removePostAPI(data) {\r\n  return axios.delete('/api/post', data);\r\n}\r\n\r\nfunction addCommentAPI(data) {\r\n  return axios.post('/api/post/${data.postId}/comment', data);\r\n}\r\n\r\nfunction* loadPosts() {\r\n  try {\r\n    // const result = yield call(loadPostsAPI);\r\n    yield put({\r\n      type: LOAD_POSTS_SUCCESS,\r\n      data: generateDummyPost(10),\r\n    });\r\n  } catch (err) {\r\n    yield put({\r\n      type: LOAD_POSTS_FAILURE,\r\n      error: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction* addPost(action) {\r\n  try {\r\n    // call은 동기라 return할때까지 기다렸다 넣어줌\r\n    // fork는 비동기라 결과 오기 전에 바로 다음 거 실행\r\n    // const result = yield call(addPostAPI, action.data);\r\n    delay(1000);\r\n    const id = shortId.generate();\r\n    yield put({\r\n      type: ADD_POST_SUCCESS,\r\n      data: {\r\n        id,\r\n        content: action.data,\r\n      },\r\n    });\r\n    yield put({\r\n      type: ADD_POST_TO_ME,\r\n      data: id,\r\n    });\r\n  } catch (err) {\r\n    yield put({\r\n      // put은 dispatch 개념\r\n      type: ADD_POST_FAILURE,\r\n      error: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction* removePost(action) {\r\n  try {\r\n    // const result = yield call(removePostAPI, action.data);\r\n    yield put({\r\n      type: REMOVE_POST_SUCCESS,\r\n      data: action.data,\r\n    });\r\n    yield put({\r\n      type: REMOVE_POST_OF_ME,\r\n      data: action.data,\r\n    });\r\n  } catch (err) {\r\n    yield put({\r\n      type: REMOVE_POST_FAILURE,\r\n      error: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction* addComment(action) {\r\n  try {\r\n    // const result = yield call(addCommentAPI, action.data);\r\n    yield put({\r\n      type: ADD_COMMENT_SUCCESS,\r\n      data: action.data,\r\n    });\r\n  } catch (err) {\r\n    yield put({\r\n      type: ADD_COMMENT_FAILURE,\r\n      error: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchLoadPosts() {\r\n  yield takeLatest(LOAD_POSTS_REQUEST, loadPosts);\r\n}\r\n\r\nfunction* watchAddPost() {\r\n  yield takeLatest(ADD_POST_REQUEST, addPost);\r\n}\r\n\r\nfunction* watchRemovePost() {\r\n  yield takeLatest(REMOVE_POST_REQUEST, removePost);\r\n}\r\n\r\nfunction* watchAddComment() {\r\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\r\n}\r\n\r\nexport default function* postSaga() {\r\n  yield all([\r\n    fork(watchLoadPosts),\r\n    fork(watchAddPost),\r\n    fork(watchRemovePost),\r\n    fork(watchAddComment),\r\n  ]);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}