{"ast":null,"code":"import { createWrapper } from 'next-redux-wrapper';\nimport { createStore, compose, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport createSagaMiddleware from 'redux-saga';\nimport reducer from '../reducers/index';\nimport rootSaga from '../sagas';\n\nconst loggerMiddleware = ({\n  dispatch,\n  getState\n}) => next => action => {\n  console.log(action);\n  return next(action);\n};\n\nconst configureStore = () => {\n  const sagaMiddleware = createSagaMiddleware();\n  const middlewares = [sagaMiddleware, loggerMiddleware]; // redux의 기능이 확장된 것이라 enhancer\n\n  const enhancer = false ? // 배포용\n  compose(applyMiddleware(...middlewares)) : // 개발용일 때는 devtools 연결\n  // middlewares는 배열이니까 spread해서 넣고!\n  composeWithDevTools(applyMiddleware(...middlewares));\n  const store = createStore(reducer, enhancer);\n  store.sagaTask = sagaMiddleware.run(rootSaga);\n  store.dispatch({\n    type: 'CHANGE_NICKNAME',\n    data: 'boogicho'\n  });\n  return store;\n};\n\nconst wrapper = createWrapper(configureStore, {\n  // 개발모드라면 디버그를 좀 더 자세하게 해 줌\n  debug: true\n});\nexport default wrapper;","map":{"version":3,"sources":["C:/Users/김승미/Desktop/SOPT/SoundPicker-Study/SoundPicker-FrontStudy/prepare/front/store/configureStore.js"],"names":["createWrapper","createStore","compose","applyMiddleware","composeWithDevTools","createSagaMiddleware","reducer","rootSaga","loggerMiddleware","dispatch","getState","next","action","console","log","configureStore","sagaMiddleware","middlewares","enhancer","store","sagaTask","run","type","data","wrapper","debug"],"mappings":"AAAA,SAASA,aAAT,QAA8B,oBAA9B;AACA,SAASC,WAAT,EAAsBC,OAAtB,EAA+BC,eAA/B,QAAsD,OAAtD;AACA,SAASC,mBAAT,QAAoC,0BAApC;AACA,OAAOC,oBAAP,MAAiC,YAAjC;AAEA,OAAOC,OAAP,MAAoB,mBAApB;AACA,OAAOC,QAAP,MAAqB,UAArB;;AAEA,MAAMC,gBAAgB,GAAG,CAAC;AAAEC,EAAAA,QAAF;AAAYC,EAAAA;AAAZ,CAAD,KAA6BC,IAAD,IAAWC,MAAD,IAAY;AACzEC,EAAAA,OAAO,CAACC,GAAR,CAAYF,MAAZ;AACA,SAAOD,IAAI,CAACC,MAAD,CAAX;AACD,CAHD;;AAKA,MAAMG,cAAc,GAAG,MAAM;AAC3B,QAAMC,cAAc,GAAGX,oBAAoB,EAA3C;AACA,QAAMY,WAAW,GAAG,CAACD,cAAD,EAAiBR,gBAAjB,CAApB,CAF2B,CAI3B;;AACA,QAAMU,QAAQ,GACZ,QACI;AACAhB,EAAAA,OAAO,CAACC,eAAe,CAAC,GAAGc,WAAJ,CAAhB,CAFX,GAGI;AACA;AACAb,EAAAA,mBAAmB,CAACD,eAAe,CAAC,GAAGc,WAAJ,CAAhB,CANzB;AAQA,QAAME,KAAK,GAAGlB,WAAW,CAACK,OAAD,EAAUY,QAAV,CAAzB;AACAC,EAAAA,KAAK,CAACC,QAAN,GAAiBJ,cAAc,CAACK,GAAf,CAAmBd,QAAnB,CAAjB;AACAY,EAAAA,KAAK,CAACV,QAAN,CAAe;AACba,IAAAA,IAAI,EAAE,iBADO;AAEbC,IAAAA,IAAI,EAAE;AAFO,GAAf;AAIA,SAAOJ,KAAP;AACD,CApBD;;AAsBA,MAAMK,OAAO,GAAGxB,aAAa,CAACe,cAAD,EAAiB;AAC5C;AACAU,EAAAA,KAAK;AAFuC,CAAjB,CAA7B;AAKA,eAAeD,OAAf","sourcesContent":["import { createWrapper } from 'next-redux-wrapper';\r\nimport { createStore, compose, applyMiddleware } from 'redux';\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\nimport createSagaMiddleware from 'redux-saga';\r\n\r\nimport reducer from '../reducers/index';\r\nimport rootSaga from '../sagas';\r\n\r\nconst loggerMiddleware = ({ dispatch, getState }) => (next) => (action) => {\r\n  console.log(action);\r\n  return next(action);\r\n};\r\n\r\nconst configureStore = () => {\r\n  const sagaMiddleware = createSagaMiddleware();\r\n  const middlewares = [sagaMiddleware, loggerMiddleware];\r\n\r\n  // redux의 기능이 확장된 것이라 enhancer\r\n  const enhancer =\r\n    process.env.NODE_ENV === 'production'\r\n      ? // 배포용\r\n        compose(applyMiddleware(...middlewares))\r\n      : // 개발용일 때는 devtools 연결\r\n        // middlewares는 배열이니까 spread해서 넣고!\r\n        composeWithDevTools(applyMiddleware(...middlewares));\r\n\r\n  const store = createStore(reducer, enhancer);\r\n  store.sagaTask = sagaMiddleware.run(rootSaga);\r\n  store.dispatch({\r\n    type: 'CHANGE_NICKNAME',\r\n    data: 'boogicho',\r\n  });\r\n  return store;\r\n};\r\n\r\nconst wrapper = createWrapper(configureStore, {\r\n  // 개발모드라면 디버그를 좀 더 자세하게 해 줌\r\n  debug: process.env.NODE_ENV === 'development',\r\n});\r\n\r\nexport default wrapper;\r\n"]},"metadata":{},"sourceType":"module"}