{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\\\uAE40\\uC2B9\\uBBF8\\\\Desktop\\\\SOPT\\\\SoundPicker-Study\\\\SoundPicker-FrontStudy\\\\prepare\\\\front\\\\pages\\\\about.js\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport { useSelector } from 'react-redux';\nimport { Avatar, Card } from 'antd';\nimport AppLayout from '../components/AppLayout';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar Profile = function Profile() {\n  _s();\n\n  var _useSelector = useSelector(function (state) {\n    return state.user;\n  }),\n      userInfo = _useSelector.userInfo;\n\n  return /*#__PURE__*/_jsxDEV(AppLayout, {\n    children: [/*#__PURE__*/_jsxDEV(Head, {\n      children: /*#__PURE__*/_jsxDEV(\"title\", {\n        children: \"seungmi | NodeBird\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 15,\n        columnNumber: 9\n      }, _this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 7\n    }, _this), userInfo ? /*#__PURE__*/_jsxDEV(Card, {\n      actions: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\"\\uC9F9\\uC9F9\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 22,\n          columnNumber: 15\n        }, _this), userInfo.Posts]\n      }, \"twit\", true, {\n        fileName: _jsxFileName,\n        lineNumber: 20,\n        columnNumber: 13\n      }, _this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\"\\uD314\\uB85C\\uC789\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 27,\n          columnNumber: 15\n        }, _this), userInfo.Followings]\n      }, \"following\", true, {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 13\n      }, _this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\"\\uD314\\uB85C\\uC6CC\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 32,\n          columnNumber: 15\n        }, _this), userInfo.Followers]\n      }, \"follower\", true, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 13\n      }, _this)],\n      children: /*#__PURE__*/_jsxDEV(Card.Meta, {\n        avatar: /*#__PURE__*/_jsxDEV(Avatar, {\n          children: userInfo.nickname[0]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 21\n        }, _this),\n        title: userInfo.nickname,\n        description: \"\\uB178\\uB4DC\\uBC84\\uB4DC \\uB9E4\\uB2C8\\uC544\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 11\n      }, _this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 9\n    }, _this) : null]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 13,\n    columnNumber: 5\n  }, _this);\n}; // 언제 접속해도 데이터가 바뀔 일이 없으면 getStaticProps\n// 블로그 게시글처럼 잘 바뀔 일이 없으면, html로 아예 뽑아주기 때문에 이걸 사용\n\n\n_s(Profile, \"tm9u9ATcYNEYVCp8P5F3TqiqzZ4=\", false, function () {\n  return [useSelector];\n});\n\n_c = Profile;\nexport var __N_SSG = true;\nexport default Profile;\n\nvar _c;\n\n$RefreshReg$(_c, \"Profile\");","map":{"version":3,"sources":["C:/Users/김승미/Desktop/SOPT/SoundPicker-Study/SoundPicker-FrontStudy/prepare/front/pages/about.js"],"names":["useSelector","Avatar","Card","AppLayout","Profile","state","user","userInfo","Posts","Followings","Followers","nickname"],"mappings":";;;;AAAA,SAASA,WAAT,QAA4B,aAA5B;AAEA,SAASC,MAAT,EAAiBC,IAAjB,QAA6B,MAA7B;AAEA,OAAOC,SAAP,MAAsB,yBAAtB;;;AAIA,IAAMC,OAAO,GAAG,SAAVA,OAAU,GAAM;AAAA;;AAAA,qBACCJ,WAAW,CAAC,UAACK,KAAD;AAAA,WAAWA,KAAK,CAACC,IAAjB;AAAA,GAAD,CADZ;AAAA,MACZC,QADY,gBACZA,QADY;;AAGpB,sBACE,QAAC,SAAD;AAAA,4BACE,QAAC,IAAD;AAAA,6BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,aADF,EAIGA,QAAQ,gBACP,QAAC,IAAD;AACE,MAAA,OAAO,EAAE,cACP;AAAA,gDAEE;AAAA;AAAA;AAAA;AAAA,iBAFF,EAGGA,QAAQ,CAACC,KAHZ;AAAA,SAAS,MAAT;AAAA;AAAA;AAAA;AAAA,eADO,eAMP;AAAA,sDAEE;AAAA;AAAA;AAAA;AAAA,iBAFF,EAGGD,QAAQ,CAACE,UAHZ;AAAA,SAAS,WAAT;AAAA;AAAA;AAAA;AAAA,eANO,eAWP;AAAA,sDAEE;AAAA;AAAA;AAAA;AAAA,iBAFF,EAGGF,QAAQ,CAACG,SAHZ;AAAA,SAAS,UAAT;AAAA;AAAA;AAAA;AAAA,eAXO,CADX;AAAA,6BAmBE,QAAC,IAAD,CAAM,IAAN;AACE,QAAA,MAAM,eAAE,QAAC,MAAD;AAAA,oBAASH,QAAQ,CAACI,QAAT,CAAkB,CAAlB;AAAT;AAAA;AAAA;AAAA;AAAA,iBADV;AAEE,QAAA,KAAK,EAAEJ,QAAQ,CAACI,QAFlB;AAGE,QAAA,WAAW,EAAC;AAHd;AAAA;AAAA;AAAA;AAAA;AAnBF;AAAA;AAAA;AAAA;AAAA,aADO,GA0BL,IA9BN;AAAA;AAAA;AAAA;AAAA;AAAA,WADF;AAkCD,CArCD,C,CAuCA;AACA;;;GAxCMP,O;UACiBJ,W;;;KADjBI,O;;AAkDN,eAAeA,OAAf","sourcesContent":["import { useSelector } from 'react-redux';\r\nimport { END } from 'redux-saga';\r\nimport { Avatar, Card } from 'antd';\r\n\r\nimport AppLayout from '../components/AppLayout';\r\nimport { LOAD_USER_REQUEST } from '../reducers/user';\r\nimport wrapper from '../store/configureStore';\r\n\r\nconst Profile = () => {\r\n  const { userInfo } = useSelector((state) => state.user);\r\n\r\n  return (\r\n    <AppLayout>\r\n      <Head>\r\n        <title>seungmi | NodeBird</title>\r\n      </Head>\r\n      {userInfo ? (\r\n        <Card\r\n          actions={[\r\n            <div key=\"twit\">\r\n              짹짹\r\n              <br />\r\n              {userInfo.Posts}\r\n            </div>,\r\n            <div key=\"following\">\r\n              팔로잉\r\n              <br />\r\n              {userInfo.Followings}\r\n            </div>,\r\n            <div key=\"follower\">\r\n              팔로워\r\n              <br />\r\n              {userInfo.Followers}\r\n            </div>,\r\n          ]}\r\n        >\r\n          <Card.Meta\r\n            avatar={<Avatar>{userInfo.nickname[0]}</Avatar>}\r\n            title={userInfo.nickname}\r\n            description=\"노드버드 매니아\"\r\n          />\r\n        </Card>\r\n      ) : null}\r\n    </AppLayout>\r\n  );\r\n};\r\n\r\n// 언제 접속해도 데이터가 바뀔 일이 없으면 getStaticProps\r\n// 블로그 게시글처럼 잘 바뀔 일이 없으면, html로 아예 뽑아주기 때문에 이걸 사용\r\nexport const getStaticProps = wrapper.getStaticProps(async (context) => {\r\n  context.store.dispatch({\r\n    type: LOAD_USER_REQUEST,\r\n    data: 1,\r\n  });\r\n  context.store.dispatch(END);\r\n  await context.store.sagaTask.toPromise();\r\n});\r\n\r\nexport default Profile;\r\n"]},"metadata":{},"sourceType":"module"}