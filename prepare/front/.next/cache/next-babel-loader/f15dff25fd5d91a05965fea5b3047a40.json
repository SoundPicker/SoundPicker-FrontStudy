{"ast":null,"code":"import { all, fork, call, put, takeLatest, delay } from 'redux-saga/effects';\nimport axios from 'axios';\n\nfunction loginAPI(data) {\n  return axios.post('/api/login', data);\n}\n\nfunction* logIn(action) {\n  try {\n    // const result = yield call(loginAPI, action.data); //call은 동기라 return할때까지 기다렸다 넣어줌, fork는 비동기라 결과 오기 전에 바로 다음 거 실행\n    yield delay(1000);\n    yield put({\n      type: 'LOG_IN_SUCCESS',\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      //put은 dispatch 개념\n      type: 'LOG_IN_FAILURE',\n      error: err.response.data\n    });\n  }\n}\n\nfunction logoutAPI() {\n  return axios.post('/api/logout');\n}\n\nfunction* logOut() {\n  try {\n    // const result = yield call(logoutAPI); //call은 동기라 return할때까지 기다렸다 넣어줌, fork는 비동기라 결과 오기 전에 바로 다음 거 실행\n    yield put({\n      type: 'LOG_OUT_SUCCESS'\n    });\n  } catch (err) {\n    yield put({\n      //put은 dispatch 개념\n      type: 'LOG_OUT_FAILURE',\n      error: err.response.data\n    });\n  }\n}\n\nfunction* watchLogIn() {\n  yield takeLatest('LOG_IN_REQUEST', logIn); //LOG_IN이라는 action이 실행될때까지 기다리겠다\n}\n\nfunction* watchLogOut() {\n  yield takeLatest('LOG_OUT_REQUEST', logOut);\n}\n\nexport default function* userSaga() {\n  yield all([fork(watchLogIn), fork(watchLogOut)]);\n}","map":{"version":3,"sources":["C:/Users/김승미/Desktop/SOPT/SoundPicker-Study/SoundPicker-FrontStudy/prepare/front/sagas/user.js"],"names":["all","fork","call","put","takeLatest","delay","axios","loginAPI","data","post","logIn","action","type","err","error","response","logoutAPI","logOut","watchLogIn","watchLogOut","userSaga"],"mappings":"AAAA,SAASA,GAAT,EAAcC,IAAd,EAAoBC,IAApB,EAA0BC,GAA1B,EAA+BC,UAA/B,EAA2CC,KAA3C,QAAwD,oBAAxD;AACA,OAAOC,KAAP,MAAkB,OAAlB;;AAEA,SAASC,QAAT,CAAkBC,IAAlB,EAAwB;AACtB,SAAOF,KAAK,CAACG,IAAN,CAAW,YAAX,EAAyBD,IAAzB,CAAP;AACD;;AAED,UAAUE,KAAV,CAAgBC,MAAhB,EAAwB;AACtB,MAAI;AACF;AACA,UAAMN,KAAK,CAAC,IAAD,CAAX;AACA,UAAMF,GAAG,CAAC;AACRS,MAAAA,IAAI,EAAE,gBADE;AAERJ,MAAAA,IAAI,EAAEG,MAAM,CAACH;AAFL,KAAD,CAAT;AAID,GAPD,CAOE,OAAOK,GAAP,EAAY;AACZ,UAAMV,GAAG,CAAC;AACR;AACAS,MAAAA,IAAI,EAAE,gBAFE;AAGRE,MAAAA,KAAK,EAAED,GAAG,CAACE,QAAJ,CAAaP;AAHZ,KAAD,CAAT;AAKD;AACF;;AAED,SAASQ,SAAT,GAAqB;AACnB,SAAOV,KAAK,CAACG,IAAN,CAAW,aAAX,CAAP;AACD;;AAED,UAAUQ,MAAV,GAAmB;AACjB,MAAI;AACF;AACA,UAAMd,GAAG,CAAC;AACRS,MAAAA,IAAI,EAAE;AADE,KAAD,CAAT;AAGD,GALD,CAKE,OAAOC,GAAP,EAAY;AACZ,UAAMV,GAAG,CAAC;AACR;AACAS,MAAAA,IAAI,EAAE,iBAFE;AAGRE,MAAAA,KAAK,EAAED,GAAG,CAACE,QAAJ,CAAaP;AAHZ,KAAD,CAAT;AAKD;AACF;;AAED,UAAUU,UAAV,GAAuB;AACrB,QAAMd,UAAU,CAAC,gBAAD,EAAmBM,KAAnB,CAAhB,CADqB,CACsB;AAC5C;;AAED,UAAUS,WAAV,GAAwB;AACtB,QAAMf,UAAU,CAAC,iBAAD,EAAoBa,MAApB,CAAhB;AACD;;AAED,eAAe,UAAUG,QAAV,GAAqB;AAClC,QAAMpB,GAAG,CAAC,CAACC,IAAI,CAACiB,UAAD,CAAL,EAAmBjB,IAAI,CAACkB,WAAD,CAAvB,CAAD,CAAT;AACD","sourcesContent":["import { all, fork, call, put, takeLatest, delay } from 'redux-saga/effects';\r\nimport axios from 'axios';\r\n\r\nfunction loginAPI(data) {\r\n  return axios.post('/api/login', data);\r\n}\r\n\r\nfunction* logIn(action) {\r\n  try {\r\n    // const result = yield call(loginAPI, action.data); //call은 동기라 return할때까지 기다렸다 넣어줌, fork는 비동기라 결과 오기 전에 바로 다음 거 실행\r\n    yield delay(1000);\r\n    yield put({\r\n      type: 'LOG_IN_SUCCESS',\r\n      data: action.data,\r\n    });\r\n  } catch (err) {\r\n    yield put({\r\n      //put은 dispatch 개념\r\n      type: 'LOG_IN_FAILURE',\r\n      error: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction logoutAPI() {\r\n  return axios.post('/api/logout');\r\n}\r\n\r\nfunction* logOut() {\r\n  try {\r\n    // const result = yield call(logoutAPI); //call은 동기라 return할때까지 기다렸다 넣어줌, fork는 비동기라 결과 오기 전에 바로 다음 거 실행\r\n    yield put({\r\n      type: 'LOG_OUT_SUCCESS',\r\n    });\r\n  } catch (err) {\r\n    yield put({\r\n      //put은 dispatch 개념\r\n      type: 'LOG_OUT_FAILURE',\r\n      error: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchLogIn() {\r\n  yield takeLatest('LOG_IN_REQUEST', logIn); //LOG_IN이라는 action이 실행될때까지 기다리겠다\r\n}\r\n\r\nfunction* watchLogOut() {\r\n  yield takeLatest('LOG_OUT_REQUEST', logOut);\r\n}\r\n\r\nexport default function* userSaga() {\r\n  yield all([fork(watchLogIn), fork(watchLogOut)]);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}