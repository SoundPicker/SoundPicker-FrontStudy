{"ast":null,"code":"import { all, fork, takeEvery, takeLatest, call, put } from 'redux-saga/effects';\nimport axios from 'axios';\n\nfunction loginAPI(data) {\n  return axios.post('/api/login', data);\n}\n\nfunction* logIn(action) {\n  try {\n    const result = yield call(loginAPI, action.data); //call은 동기라 return할때까지 기다렸다 넣어줌, fork는 비동기라 결과 오기 전에 바로 다음 거 실행\n\n    yield put({\n      type: 'LOG_IN_SUCCESS',\n      data: result.data\n    });\n  } catch (err) {\n    yield put({\n      //put은 dispatch 개념\n      type: 'LOG_IN_FAILURE',\n      data: err.response.data\n    });\n  }\n}\n\nfunction logoutAPI() {\n  return axios.post('/api/logout');\n}\n\nfunction* logOut() {\n  try {\n    const result = yield call(logoutAPI); //call은 동기라 return할때까지 기다렸다 넣어줌, fork는 비동기라 결과 오기 전에 바로 다음 거 실행\n\n    yield put({\n      type: 'LOG_OUT_SUCCESS',\n      data: result.data\n    });\n  } catch (err) {\n    yield put({\n      //put은 dispatch 개념\n      type: 'LOG_OUT_FAILURE',\n      data: err.response.data\n    });\n  }\n}\n\nfunction addPostAPI(data) {\n  return axios.post('/api/post', data);\n}\n\nfunction* addPost(action) {\n  try {\n    const result = yield call(addPostAPI, action.data); //call은 동기라 return할때까지 기다렸다 넣어줌, fork는 비동기라 결과 오기 전에 바로 다음 거 실행\n\n    yield put({\n      type: 'ADD_POST_SUCCESS',\n      data: result.data\n    });\n  } catch (err) {\n    yield put({\n      //put은 dispatch 개념\n      type: 'ADD_POST_FAILURE',\n      data: err.response.data\n    });\n  }\n}\n\nfunction* watchLogIn() {\n  yield takeLatest('LOG_IN_REQUEST', logIn); //LOG_IN이라는 action이 실행될때까지 기다리겠다\n}\n\nfunction* watchLogOut() {\n  yield takeLatest('LOG_OUT_REQUEST', logOut);\n}\n\nfunction* watchAddPost() {\n  yield takeLatest('ADD_POST_REQUEST', addPost);\n}\n\nexport default function* rootSaga() {\n  yield all([fork(watchLogIn), fork(watchLogOut), fork(watchAddPost)]);\n}","map":{"version":3,"sources":["C:/Users/김승미/Desktop/SOPT/SoundPicker-Study/SoundPicker-FrontStudy/prepare/front/sagas/index.js"],"names":["all","fork","takeEvery","takeLatest","call","put","axios","loginAPI","data","post","logIn","action","result","type","err","response","logoutAPI","logOut","addPostAPI","addPost","watchLogIn","watchLogOut","watchAddPost","rootSaga"],"mappings":"AAAA,SACEA,GADF,EAEEC,IAFF,EAGEC,SAHF,EAIEC,UAJF,EAKEC,IALF,EAMEC,GANF,QAOO,oBAPP;AAQA,OAAOC,KAAP,MAAkB,OAAlB;;AAEA,SAASC,QAAT,CAAkBC,IAAlB,EAAwB;AACtB,SAAOF,KAAK,CAACG,IAAN,CAAW,YAAX,EAAyBD,IAAzB,CAAP;AACD;;AAED,UAAUE,KAAV,CAAgBC,MAAhB,EAAwB;AACtB,MAAI;AACF,UAAMC,MAAM,GAAG,MAAMR,IAAI,CAACG,QAAD,EAAWI,MAAM,CAACH,IAAlB,CAAzB,CADE,CACgD;;AAClD,UAAMH,GAAG,CAAC;AACRQ,MAAAA,IAAI,EAAE,gBADE;AAERL,MAAAA,IAAI,EAAEI,MAAM,CAACJ;AAFL,KAAD,CAAT;AAID,GAND,CAME,OAAOM,GAAP,EAAY;AACZ,UAAMT,GAAG,CAAC;AACR;AACAQ,MAAAA,IAAI,EAAE,gBAFE;AAGRL,MAAAA,IAAI,EAAEM,GAAG,CAACC,QAAJ,CAAaP;AAHX,KAAD,CAAT;AAKD;AACF;;AAED,SAASQ,SAAT,GAAqB;AACnB,SAAOV,KAAK,CAACG,IAAN,CAAW,aAAX,CAAP;AACD;;AAED,UAAUQ,MAAV,GAAmB;AACjB,MAAI;AACF,UAAML,MAAM,GAAG,MAAMR,IAAI,CAACY,SAAD,CAAzB,CADE,CACoC;;AACtC,UAAMX,GAAG,CAAC;AACRQ,MAAAA,IAAI,EAAE,iBADE;AAERL,MAAAA,IAAI,EAAEI,MAAM,CAACJ;AAFL,KAAD,CAAT;AAID,GAND,CAME,OAAOM,GAAP,EAAY;AACZ,UAAMT,GAAG,CAAC;AACR;AACAQ,MAAAA,IAAI,EAAE,iBAFE;AAGRL,MAAAA,IAAI,EAAEM,GAAG,CAACC,QAAJ,CAAaP;AAHX,KAAD,CAAT;AAKD;AACF;;AAED,SAASU,UAAT,CAAoBV,IAApB,EAA0B;AACxB,SAAOF,KAAK,CAACG,IAAN,CAAW,WAAX,EAAwBD,IAAxB,CAAP;AACD;;AAED,UAAUW,OAAV,CAAkBR,MAAlB,EAA0B;AACxB,MAAI;AACF,UAAMC,MAAM,GAAG,MAAMR,IAAI,CAACc,UAAD,EAAaP,MAAM,CAACH,IAApB,CAAzB,CADE,CACkD;;AACpD,UAAMH,GAAG,CAAC;AACRQ,MAAAA,IAAI,EAAE,kBADE;AAERL,MAAAA,IAAI,EAAEI,MAAM,CAACJ;AAFL,KAAD,CAAT;AAID,GAND,CAME,OAAOM,GAAP,EAAY;AACZ,UAAMT,GAAG,CAAC;AACR;AACAQ,MAAAA,IAAI,EAAE,kBAFE;AAGRL,MAAAA,IAAI,EAAEM,GAAG,CAACC,QAAJ,CAAaP;AAHX,KAAD,CAAT;AAKD;AACF;;AAED,UAAUY,UAAV,GAAuB;AACrB,QAAMjB,UAAU,CAAC,gBAAD,EAAmBO,KAAnB,CAAhB,CADqB,CACsB;AAC5C;;AAED,UAAUW,WAAV,GAAwB;AACtB,QAAMlB,UAAU,CAAC,iBAAD,EAAoBc,MAApB,CAAhB;AACD;;AAED,UAAUK,YAAV,GAAyB;AACvB,QAAMnB,UAAU,CAAC,kBAAD,EAAqBgB,OAArB,CAAhB;AACD;;AAED,eAAe,UAAUI,QAAV,GAAqB;AAClC,QAAMvB,GAAG,CAAC,CAACC,IAAI,CAACmB,UAAD,CAAL,EAAmBnB,IAAI,CAACoB,WAAD,CAAvB,EAAsCpB,IAAI,CAACqB,YAAD,CAA1C,CAAD,CAAT;AACD","sourcesContent":["import {\r\n  all,\r\n  fork,\r\n  takeEvery,\r\n  takeLatest,\r\n  call,\r\n  put,\r\n} from 'redux-saga/effects';\r\nimport axios from 'axios';\r\n\r\nfunction loginAPI(data) {\r\n  return axios.post('/api/login', data);\r\n}\r\n\r\nfunction* logIn(action) {\r\n  try {\r\n    const result = yield call(loginAPI, action.data); //call은 동기라 return할때까지 기다렸다 넣어줌, fork는 비동기라 결과 오기 전에 바로 다음 거 실행\r\n    yield put({\r\n      type: 'LOG_IN_SUCCESS',\r\n      data: result.data,\r\n    });\r\n  } catch (err) {\r\n    yield put({\r\n      //put은 dispatch 개념\r\n      type: 'LOG_IN_FAILURE',\r\n      data: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction logoutAPI() {\r\n  return axios.post('/api/logout');\r\n}\r\n\r\nfunction* logOut() {\r\n  try {\r\n    const result = yield call(logoutAPI); //call은 동기라 return할때까지 기다렸다 넣어줌, fork는 비동기라 결과 오기 전에 바로 다음 거 실행\r\n    yield put({\r\n      type: 'LOG_OUT_SUCCESS',\r\n      data: result.data,\r\n    });\r\n  } catch (err) {\r\n    yield put({\r\n      //put은 dispatch 개념\r\n      type: 'LOG_OUT_FAILURE',\r\n      data: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction addPostAPI(data) {\r\n  return axios.post('/api/post', data);\r\n}\r\n\r\nfunction* addPost(action) {\r\n  try {\r\n    const result = yield call(addPostAPI, action.data); //call은 동기라 return할때까지 기다렸다 넣어줌, fork는 비동기라 결과 오기 전에 바로 다음 거 실행\r\n    yield put({\r\n      type: 'ADD_POST_SUCCESS',\r\n      data: result.data,\r\n    });\r\n  } catch (err) {\r\n    yield put({\r\n      //put은 dispatch 개념\r\n      type: 'ADD_POST_FAILURE',\r\n      data: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchLogIn() {\r\n  yield takeLatest('LOG_IN_REQUEST', logIn); //LOG_IN이라는 action이 실행될때까지 기다리겠다\r\n}\r\n\r\nfunction* watchLogOut() {\r\n  yield takeLatest('LOG_OUT_REQUEST', logOut);\r\n}\r\n\r\nfunction* watchAddPost() {\r\n  yield takeLatest('ADD_POST_REQUEST', addPost);\r\n}\r\n\r\nexport default function* rootSaga() {\r\n  yield all([fork(watchLogIn), fork(watchLogOut), fork(watchAddPost)]);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}