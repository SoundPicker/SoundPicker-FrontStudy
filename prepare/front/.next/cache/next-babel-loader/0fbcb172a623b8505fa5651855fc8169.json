{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport shortId from 'shortid';\nexport const initialState = {\n  mainPosts: [{\n    id: 1,\n    User: {\n      id: 1,\n      nickname: '제로초'\n    },\n    content: '첫 번째 게시글 #해시태그 #익스프레스',\n    Images: [{\n      id: shortId.generate(),\n      src: 'https://www.daangn.com/images/meta/home/daangn.png'\n    }, {\n      id: shortId.generate(),\n      src: 'https://user-images.githubusercontent.com/1305982/50403650-44804500-07db-11e9-98aa-cfee9a9aec69.png'\n    }, {\n      id: shortId.generate(),\n      src: 'https://platum.kr/wp-content/uploads/2020/09/daangn_mau1000.jpg'\n    }],\n    Comments: [{\n      id: shortId.generate(),\n      User: {\n        id: shortId.generate(),\n        nickname: 'nero'\n      },\n      content: '우와 개정판이 나왔군요~'\n    }, {\n      id: shortId.generate(),\n      User: {\n        id: shortId.generate(),\n        nickname: 'hero'\n      },\n      content: '얼른 사고싶어요~'\n    }]\n  }],\n  imagePaths: [],\n  addPostLoading: false,\n  addPostDone: false,\n  addPostError: null,\n  removePostLoading: false,\n  removePostDone: false,\n  removePostError: null,\n  addCommentLoading: false,\n  addCommentDone: false,\n  addCommentError: null\n}; // action type(action 이름)을 상수로 빼주면 switch문에서 재활용 가능\n\nexport const ADD_POST_REQUEST = 'ADD_POST_REQUEST';\nexport const ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\nexport const ADD_POST_FAILURE = 'ADD_POST_FAILURE';\nexport const REMOVE_POST_REQUEST = 'REMOVE_POST_REQUEST';\nexport const REMOVE_POST_SUCCESS = 'REMOVE_POST_SUCCESS';\nexport const REMOVE_POST_FAILURE = 'REMOVE_POST_FAILURE';\nexport const ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST';\nexport const ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS';\nexport const ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE';\nexport const addPostRequestAction = data => {\n  return {\n    type: ADD_POST_REQUEST,\n    data\n  };\n};\nexport const addCommentRequestAction = data => {\n  return {\n    type: ADD_COMMENT_REQUEST,\n    data\n  };\n};\n\nconst dummyPost = data => ({\n  id: data.id,\n  content: data.content,\n  User: {\n    id: 1,\n    nickname: '제로초'\n  },\n  Images: [],\n  Comments: []\n});\n\nconst dummyComment = data => ({\n  id: shortId.generate(),\n  content: data,\n  User: {\n    id: 1,\n    nickname: '제로초'\n  }\n});\n\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case ADD_POST_REQUEST:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        addPostLoading: true,\n        addPostDone: false,\n        addPostError: null\n      });\n\n    case ADD_POST_SUCCESS:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        // 앞에 추가해야 제일 위에 추가됨\n        mainPosts: [dummyPost(action.data), ...state.mainPosts],\n        addPostLoading: false,\n        addPostDone: true\n      });\n\n    case ADD_POST_FAILURE:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        addPostLoading: false,\n        addPostError: action.error\n      });\n\n    case REMOVE_POST_REQUEST:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        removePostLoading: true,\n        removePostDone: false,\n        removePostError: null\n      });\n\n    case REMOVE_POST_SUCCESS:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        mainPosts: state.mainPosts.filter(v => v.id !== action.data),\n        removePostLoading: false,\n        removePostDone: true\n      });\n\n    case REMOVE_POST_FAILURE:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        removePostLoading: false,\n        removePostError: action.error\n      });\n\n    case ADD_COMMENT_REQUEST:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        addCommentLoading: true,\n        addCommentDone: false,\n        addCommentError: null\n      });\n\n    case ADD_COMMENT_SUCCESS:\n      const postIndex = state.mainPosts.findIndex(v => v.id === action.data.postId);\n\n      const post = _objectSpread({}, state.mainPosts[postIndex]);\n\n      post.Comments = [dummyComment(action.data.content), ...post.Comments];\n      const mainPosts = [...state.mainPosts];\n      mainPosts[postIndex] = post;\n      return _objectSpread(_objectSpread({}, state), {}, {\n        mainPosts,\n        addCommentLoading: false,\n        addCommentDone: true\n      });\n\n    case ADD_COMMENT_FAILURE:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        addCommentLoading: false,\n        addCommentError: action.error\n      });\n\n    default:\n      return state;\n  }\n};\n\nexport default reducer;","map":{"version":3,"sources":["C:/Users/김승미/Desktop/SOPT/SoundPicker-Study/SoundPicker-FrontStudy/prepare/front/reducers/post.js"],"names":["shortId","initialState","mainPosts","id","User","nickname","content","Images","generate","src","Comments","imagePaths","addPostLoading","addPostDone","addPostError","removePostLoading","removePostDone","removePostError","addCommentLoading","addCommentDone","addCommentError","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","addPostRequestAction","data","type","addCommentRequestAction","dummyPost","dummyComment","reducer","state","action","error","filter","v","postIndex","findIndex","postId","post"],"mappings":";;;;;;AAAA,OAAOA,OAAP,MAAoB,SAApB;AAEA,OAAO,MAAMC,YAAY,GAAG;AAC1BC,EAAAA,SAAS,EAAE,CACT;AACEC,IAAAA,EAAE,EAAE,CADN;AAEEC,IAAAA,IAAI,EAAE;AACJD,MAAAA,EAAE,EAAE,CADA;AAEJE,MAAAA,QAAQ,EAAE;AAFN,KAFR;AAMEC,IAAAA,OAAO,EAAE,uBANX;AAOEC,IAAAA,MAAM,EAAE,CACN;AACEJ,MAAAA,EAAE,EAAEH,OAAO,CAACQ,QAAR,EADN;AAEEC,MAAAA,GAAG,EAAE;AAFP,KADM,EAKN;AACEN,MAAAA,EAAE,EAAEH,OAAO,CAACQ,QAAR,EADN;AAEEC,MAAAA,GAAG,EACD;AAHJ,KALM,EAUN;AACEN,MAAAA,EAAE,EAAEH,OAAO,CAACQ,QAAR,EADN;AAEEC,MAAAA,GAAG,EACD;AAHJ,KAVM,CAPV;AAuBEC,IAAAA,QAAQ,EAAE,CACR;AACEP,MAAAA,EAAE,EAAEH,OAAO,CAACQ,QAAR,EADN;AAEEJ,MAAAA,IAAI,EAAE;AACJD,QAAAA,EAAE,EAAEH,OAAO,CAACQ,QAAR,EADA;AAEJH,QAAAA,QAAQ,EAAE;AAFN,OAFR;AAMEC,MAAAA,OAAO,EAAE;AANX,KADQ,EASR;AACEH,MAAAA,EAAE,EAAEH,OAAO,CAACQ,QAAR,EADN;AAEEJ,MAAAA,IAAI,EAAE;AACJD,QAAAA,EAAE,EAAEH,OAAO,CAACQ,QAAR,EADA;AAEJH,QAAAA,QAAQ,EAAE;AAFN,OAFR;AAMEC,MAAAA,OAAO,EAAE;AANX,KATQ;AAvBZ,GADS,CADe;AA6C1BK,EAAAA,UAAU,EAAE,EA7Cc;AA8C1BC,EAAAA,cAAc,EAAE,KA9CU;AA+C1BC,EAAAA,WAAW,EAAE,KA/Ca;AAgD1BC,EAAAA,YAAY,EAAE,IAhDY;AAiD1BC,EAAAA,iBAAiB,EAAE,KAjDO;AAkD1BC,EAAAA,cAAc,EAAE,KAlDU;AAmD1BC,EAAAA,eAAe,EAAE,IAnDS;AAoD1BC,EAAAA,iBAAiB,EAAE,KApDO;AAqD1BC,EAAAA,cAAc,EAAE,KArDU;AAsD1BC,EAAAA,eAAe,EAAE;AAtDS,CAArB,C,CAyDP;;AACA,OAAO,MAAMC,gBAAgB,GAAG,kBAAzB;AACP,OAAO,MAAMC,gBAAgB,GAAG,kBAAzB;AACP,OAAO,MAAMC,gBAAgB,GAAG,kBAAzB;AAEP,OAAO,MAAMC,mBAAmB,GAAG,qBAA5B;AACP,OAAO,MAAMC,mBAAmB,GAAG,qBAA5B;AACP,OAAO,MAAMC,mBAAmB,GAAG,qBAA5B;AAEP,OAAO,MAAMC,mBAAmB,GAAG,qBAA5B;AACP,OAAO,MAAMC,mBAAmB,GAAG,qBAA5B;AACP,OAAO,MAAMC,mBAAmB,GAAG,qBAA5B;AAEP,OAAO,MAAMC,oBAAoB,GAAIC,IAAD,IAAU;AAC5C,SAAO;AACLC,IAAAA,IAAI,EAAEX,gBADD;AAELU,IAAAA;AAFK,GAAP;AAID,CALM;AAOP,OAAO,MAAME,uBAAuB,GAAIF,IAAD,IAAU;AAC/C,SAAO;AACLC,IAAAA,IAAI,EAAEL,mBADD;AAELI,IAAAA;AAFK,GAAP;AAID,CALM;;AAOP,MAAMG,SAAS,GAAIH,IAAD,KAAW;AAC3B5B,EAAAA,EAAE,EAAE4B,IAAI,CAAC5B,EADkB;AAE3BG,EAAAA,OAAO,EAAEyB,IAAI,CAACzB,OAFa;AAG3BF,EAAAA,IAAI,EAAE;AACJD,IAAAA,EAAE,EAAE,CADA;AAEJE,IAAAA,QAAQ,EAAE;AAFN,GAHqB;AAO3BE,EAAAA,MAAM,EAAE,EAPmB;AAQ3BG,EAAAA,QAAQ,EAAE;AARiB,CAAX,CAAlB;;AAWA,MAAMyB,YAAY,GAAIJ,IAAD,KAAW;AAC9B5B,EAAAA,EAAE,EAAEH,OAAO,CAACQ,QAAR,EAD0B;AAE9BF,EAAAA,OAAO,EAAEyB,IAFqB;AAG9B3B,EAAAA,IAAI,EAAE;AACJD,IAAAA,EAAE,EAAE,CADA;AAEJE,IAAAA,QAAQ,EAAE;AAFN;AAHwB,CAAX,CAArB;;AASA,MAAM+B,OAAO,GAAG,CAACC,KAAK,GAAGpC,YAAT,EAAuBqC,MAAvB,KAAkC;AAChD,UAAQA,MAAM,CAACN,IAAf;AACE,SAAKX,gBAAL;AACE,6CACKgB,KADL;AAEEzB,QAAAA,cAAc,EAAE,IAFlB;AAGEC,QAAAA,WAAW,EAAE,KAHf;AAIEC,QAAAA,YAAY,EAAE;AAJhB;;AAMF,SAAKQ,gBAAL;AACE,6CACKe,KADL;AAEE;AACAnC,QAAAA,SAAS,EAAE,CAACgC,SAAS,CAACI,MAAM,CAACP,IAAR,CAAV,EAAyB,GAAGM,KAAK,CAACnC,SAAlC,CAHb;AAIEU,QAAAA,cAAc,EAAE,KAJlB;AAKEC,QAAAA,WAAW,EAAE;AALf;;AAOF,SAAKU,gBAAL;AACE,6CACKc,KADL;AAEEzB,QAAAA,cAAc,EAAE,KAFlB;AAGEE,QAAAA,YAAY,EAAEwB,MAAM,CAACC;AAHvB;;AAKF,SAAKf,mBAAL;AACE,6CACKa,KADL;AAEEtB,QAAAA,iBAAiB,EAAE,IAFrB;AAGEC,QAAAA,cAAc,EAAE,KAHlB;AAIEC,QAAAA,eAAe,EAAE;AAJnB;;AAMF,SAAKQ,mBAAL;AACE,6CACKY,KADL;AAEEnC,QAAAA,SAAS,EAAEmC,KAAK,CAACnC,SAAN,CAAgBsC,MAAhB,CAAwBC,CAAD,IAAOA,CAAC,CAACtC,EAAF,KAASmC,MAAM,CAACP,IAA9C,CAFb;AAGEhB,QAAAA,iBAAiB,EAAE,KAHrB;AAIEC,QAAAA,cAAc,EAAE;AAJlB;;AAMF,SAAKU,mBAAL;AACE,6CACKW,KADL;AAEEtB,QAAAA,iBAAiB,EAAE,KAFrB;AAGEE,QAAAA,eAAe,EAAEqB,MAAM,CAACC;AAH1B;;AAKF,SAAKZ,mBAAL;AACE,6CACKU,KADL;AAEEnB,QAAAA,iBAAiB,EAAE,IAFrB;AAGEC,QAAAA,cAAc,EAAE,KAHlB;AAIEC,QAAAA,eAAe,EAAE;AAJnB;;AAMF,SAAKQ,mBAAL;AACE,YAAMc,SAAS,GAAGL,KAAK,CAACnC,SAAN,CAAgByC,SAAhB,CACfF,CAAD,IAAOA,CAAC,CAACtC,EAAF,KAASmC,MAAM,CAACP,IAAP,CAAYa,MADZ,CAAlB;;AAGA,YAAMC,IAAI,qBAAQR,KAAK,CAACnC,SAAN,CAAgBwC,SAAhB,CAAR,CAAV;;AACAG,MAAAA,IAAI,CAACnC,QAAL,GAAgB,CAACyB,YAAY,CAACG,MAAM,CAACP,IAAP,CAAYzB,OAAb,CAAb,EAAoC,GAAGuC,IAAI,CAACnC,QAA5C,CAAhB;AACA,YAAMR,SAAS,GAAG,CAAC,GAAGmC,KAAK,CAACnC,SAAV,CAAlB;AACAA,MAAAA,SAAS,CAACwC,SAAD,CAAT,GAAuBG,IAAvB;AACA,6CACKR,KADL;AAEEnC,QAAAA,SAFF;AAGEgB,QAAAA,iBAAiB,EAAE,KAHrB;AAIEC,QAAAA,cAAc,EAAE;AAJlB;;AAMF,SAAKU,mBAAL;AACE,6CACKQ,KADL;AAEEnB,QAAAA,iBAAiB,EAAE,KAFrB;AAGEE,QAAAA,eAAe,EAAEkB,MAAM,CAACC;AAH1B;;AAKF;AACE,aAAOF,KAAP;AAtEJ;AAwED,CAzED;;AA2EA,eAAeD,OAAf","sourcesContent":["import shortId from 'shortid';\r\n\r\nexport const initialState = {\r\n  mainPosts: [\r\n    {\r\n      id: 1,\r\n      User: {\r\n        id: 1,\r\n        nickname: '제로초',\r\n      },\r\n      content: '첫 번째 게시글 #해시태그 #익스프레스',\r\n      Images: [\r\n        {\r\n          id: shortId.generate(),\r\n          src: 'https://www.daangn.com/images/meta/home/daangn.png',\r\n        },\r\n        {\r\n          id: shortId.generate(),\r\n          src:\r\n            'https://user-images.githubusercontent.com/1305982/50403650-44804500-07db-11e9-98aa-cfee9a9aec69.png',\r\n        },\r\n        {\r\n          id: shortId.generate(),\r\n          src:\r\n            'https://platum.kr/wp-content/uploads/2020/09/daangn_mau1000.jpg',\r\n        },\r\n      ],\r\n      Comments: [\r\n        {\r\n          id: shortId.generate(),\r\n          User: {\r\n            id: shortId.generate(),\r\n            nickname: 'nero',\r\n          },\r\n          content: '우와 개정판이 나왔군요~',\r\n        },\r\n        {\r\n          id: shortId.generate(),\r\n          User: {\r\n            id: shortId.generate(),\r\n            nickname: 'hero',\r\n          },\r\n          content: '얼른 사고싶어요~',\r\n        },\r\n      ],\r\n    },\r\n  ],\r\n  imagePaths: [],\r\n  addPostLoading: false,\r\n  addPostDone: false,\r\n  addPostError: null,\r\n  removePostLoading: false,\r\n  removePostDone: false,\r\n  removePostError: null,\r\n  addCommentLoading: false,\r\n  addCommentDone: false,\r\n  addCommentError: null,\r\n};\r\n\r\n// action type(action 이름)을 상수로 빼주면 switch문에서 재활용 가능\r\nexport const ADD_POST_REQUEST = 'ADD_POST_REQUEST';\r\nexport const ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\r\nexport const ADD_POST_FAILURE = 'ADD_POST_FAILURE';\r\n\r\nexport const REMOVE_POST_REQUEST = 'REMOVE_POST_REQUEST';\r\nexport const REMOVE_POST_SUCCESS = 'REMOVE_POST_SUCCESS';\r\nexport const REMOVE_POST_FAILURE = 'REMOVE_POST_FAILURE';\r\n\r\nexport const ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST';\r\nexport const ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS';\r\nexport const ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE';\r\n\r\nexport const addPostRequestAction = (data) => {\r\n  return {\r\n    type: ADD_POST_REQUEST,\r\n    data,\r\n  };\r\n};\r\n\r\nexport const addCommentRequestAction = (data) => {\r\n  return {\r\n    type: ADD_COMMENT_REQUEST,\r\n    data,\r\n  };\r\n};\r\n\r\nconst dummyPost = (data) => ({\r\n  id: data.id,\r\n  content: data.content,\r\n  User: {\r\n    id: 1,\r\n    nickname: '제로초',\r\n  },\r\n  Images: [],\r\n  Comments: [],\r\n});\r\n\r\nconst dummyComment = (data) => ({\r\n  id: shortId.generate(),\r\n  content: data,\r\n  User: {\r\n    id: 1,\r\n    nickname: '제로초',\r\n  },\r\n});\r\n\r\nconst reducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case ADD_POST_REQUEST:\r\n      return {\r\n        ...state,\r\n        addPostLoading: true,\r\n        addPostDone: false,\r\n        addPostError: null,\r\n      };\r\n    case ADD_POST_SUCCESS:\r\n      return {\r\n        ...state,\r\n        // 앞에 추가해야 제일 위에 추가됨\r\n        mainPosts: [dummyPost(action.data), ...state.mainPosts],\r\n        addPostLoading: false,\r\n        addPostDone: true,\r\n      };\r\n    case ADD_POST_FAILURE:\r\n      return {\r\n        ...state,\r\n        addPostLoading: false,\r\n        addPostError: action.error,\r\n      };\r\n    case REMOVE_POST_REQUEST:\r\n      return {\r\n        ...state,\r\n        removePostLoading: true,\r\n        removePostDone: false,\r\n        removePostError: null,\r\n      };\r\n    case REMOVE_POST_SUCCESS:\r\n      return {\r\n        ...state,\r\n        mainPosts: state.mainPosts.filter((v) => v.id !== action.data),\r\n        removePostLoading: false,\r\n        removePostDone: true,\r\n      };\r\n    case REMOVE_POST_FAILURE:\r\n      return {\r\n        ...state,\r\n        removePostLoading: false,\r\n        removePostError: action.error,\r\n      };\r\n    case ADD_COMMENT_REQUEST:\r\n      return {\r\n        ...state,\r\n        addCommentLoading: true,\r\n        addCommentDone: false,\r\n        addCommentError: null,\r\n      };\r\n    case ADD_COMMENT_SUCCESS:\r\n      const postIndex = state.mainPosts.findIndex(\r\n        (v) => v.id === action.data.postId\r\n      );\r\n      const post = { ...state.mainPosts[postIndex] };\r\n      post.Comments = [dummyComment(action.data.content), ...post.Comments];\r\n      const mainPosts = [...state.mainPosts];\r\n      mainPosts[postIndex] = post;\r\n      return {\r\n        ...state,\r\n        mainPosts,\r\n        addCommentLoading: false,\r\n        addCommentDone: true,\r\n      };\r\n    case ADD_COMMENT_FAILURE:\r\n      return {\r\n        ...state,\r\n        addCommentLoading: false,\r\n        addCommentError: action.error,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default reducer;\r\n"]},"metadata":{},"sourceType":"module"}