{"ast":null,"code":"import { all, fork, put, takeLatest, delay } from 'redux-saga//effects';\nimport axios from 'axios';\nimport shortId from 'shortid';\nimport { ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE, REMOVE_POST_REQUEST, REMOVE_POST_SUCCESS, REMOVE_POST_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE } from '../reducers/post';\nimport { ADD_POST_TO_ME } from '../reducers/user';\n\nfunction addPostAPI(data) {\n  return axios.post('/api/post', data);\n}\n\nfunction removePostAPI(data) {\n  return axios.delete('/api/post', data);\n}\n\nfunction addCommentAPI(data) {\n  return axios.post('/api/post/${data.postId}/comment', data);\n}\n\nfunction* addPost(action) {\n  try {\n    // const result = yield call(addPostAPI, action.data); //call은 동기라 return할때까지 기다렸다 넣어줌, fork는 비동기라 결과 오기 전에 바로 다음 거 실행\n    delay(1000);\n    const id = shortId.generate();\n    yield put({\n      type: ADD_POST_SUCCESS,\n      data: {\n        id,\n        content: action.data\n      }\n    });\n    yield put({\n      type: ADD_POST_TO_ME,\n      data: id\n    });\n  } catch (err) {\n    yield put({\n      //put은 dispatch 개념\n      type: ADD_POST_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction* removePost(action) {\n  try {\n    // const result = yield call(removePostAPI, action.data);\n    const id = shortId.generate();\n    yield put({\n      type: REMOVE_POST_SUCCESS,\n      data: {\n        id,\n        content: action.data\n      }\n    });\n    yield put({\n      type: REMOVE_POST_OF_ME,\n      data: id\n    });\n  } catch (err) {\n    yield put({\n      type: REMOVE_POST_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction* addComment(action) {\n  try {\n    // const result = yield call(addCommentAPI, action.data);\n    yield put({\n      type: ADD_COMMENT_SUCCESS,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n}\n\nfunction* watchRemovePost() {\n  yield takeLatest(REMOVE_POST_REQUEST, removePost);\n}\n\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\n\nexport default function* postSaga() {\n  yield all([fork(watchAddPost), fork(watchRemovePost), fork(watchAddComment)]);\n}","map":{"version":3,"sources":["C:/Users/김승미/Desktop/SOPT/SoundPicker-Study/SoundPicker-FrontStudy/prepare/front/sagas/post.js"],"names":["all","fork","put","takeLatest","delay","axios","shortId","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","ADD_POST_TO_ME","addPostAPI","data","post","removePostAPI","delete","addCommentAPI","addPost","action","id","generate","type","content","err","error","response","removePost","REMOVE_POST_OF_ME","addComment","watchAddPost","watchRemovePost","watchAddComment","postSaga"],"mappings":"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","sourcesContent":["import { all, fork, put, takeLatest, delay } from 'redux-saga//effects';\r\nimport axios from 'axios';\r\nimport shortId from 'shortid';\r\n\r\nimport {\r\n  ADD_POST_REQUEST,\r\n  ADD_POST_SUCCESS,\r\n  ADD_POST_FAILURE,\r\n  REMOVE_POST_REQUEST,\r\n  REMOVE_POST_SUCCESS,\r\n  REMOVE_POST_FAILURE,\r\n  ADD_COMMENT_REQUEST,\r\n  ADD_COMMENT_SUCCESS,\r\n  ADD_COMMENT_FAILURE,\r\n} from '../reducers/post';\r\nimport { ADD_POST_TO_ME } from '../reducers/user';\r\n\r\nfunction addPostAPI(data) {\r\n  return axios.post('/api/post', data);\r\n}\r\n\r\nfunction removePostAPI(data) {\r\n  return axios.delete('/api/post', data);\r\n}\r\n\r\nfunction addCommentAPI(data) {\r\n  return axios.post('/api/post/${data.postId}/comment', data);\r\n}\r\n\r\nfunction* addPost(action) {\r\n  try {\r\n    // const result = yield call(addPostAPI, action.data); //call은 동기라 return할때까지 기다렸다 넣어줌, fork는 비동기라 결과 오기 전에 바로 다음 거 실행\r\n    delay(1000);\r\n    const id = shortId.generate();\r\n    yield put({\r\n      type: ADD_POST_SUCCESS,\r\n      data: {\r\n        id,\r\n        content: action.data,\r\n      },\r\n    });\r\n    yield put({\r\n      type: ADD_POST_TO_ME,\r\n      data: id,\r\n    });\r\n  } catch (err) {\r\n    yield put({\r\n      //put은 dispatch 개념\r\n      type: ADD_POST_FAILURE,\r\n      error: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction* removePost(action) {\r\n  try {\r\n    // const result = yield call(removePostAPI, action.data);\r\n    const id = shortId.generate();\r\n    yield put({\r\n      type: REMOVE_POST_SUCCESS,\r\n      data: {\r\n        id,\r\n        content: action.data,\r\n      },\r\n    });\r\n    yield put({\r\n      type: REMOVE_POST_OF_ME,\r\n      data: id,\r\n    });\r\n  } catch (err) {\r\n    yield put({\r\n      type: REMOVE_POST_FAILURE,\r\n      error: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction* addComment(action) {\r\n  try {\r\n    // const result = yield call(addCommentAPI, action.data);\r\n    yield put({\r\n      type: ADD_COMMENT_SUCCESS,\r\n      data: action.data,\r\n    });\r\n  } catch (err) {\r\n    yield put({\r\n      type: ADD_COMMENT_FAILURE,\r\n      error: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchAddPost() {\r\n  yield takeLatest(ADD_POST_REQUEST, addPost);\r\n}\r\n\r\nfunction* watchRemovePost() {\r\n  yield takeLatest(REMOVE_POST_REQUEST, removePost);\r\n}\r\n\r\nfunction* watchAddComment() {\r\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\r\n}\r\n\r\nexport default function* postSaga() {\r\n  yield all([fork(watchAddPost), fork(watchRemovePost), fork(watchAddComment)]);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}